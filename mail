using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Drawing;
using System.Collections.Generic;
using System.ComponentModel;
using System.Text;
using System.Xml.Serialization;
using System.Xml;
using System.Data.SqlClient;
using System.Web.Services.Protocols;
using System.IO;
using REG;
using REG.BLL;
using REG.DAL;
using REG.GetSetParameter;
using System.Drawing.Imaging;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;


public partial class EVWP_REG_FRM_EVSN_Creation_New : System.Web.UI.Page
{
    string camspcode, user_code, client_code, location_code, flag;
    string camparamname, camparameter;
    string camProjectName = "CMS";
    int paramcount;
    DataSet ds = new DataSet();
    DataSet ds1 = new DataSet();
    DataSet ds3 = new DataSet();
    DataSet ds2;
    DataSet ds5 = new DataSet();
    DataSet resultSet = new DataSet();
    REGBLL bll = new REGBLL();
    // Webservice Call
    CameoWebService.Service ws = new CameoWebService.Service();
    CMS.Cls_Variable objclsvar = new CMS.Cls_Variable();
    DataTable dt = new DataTable();
    HttpPostedFile FilePro_File;
    HttpPostedFile Upload_Photo;
    string res = "";
    string Fileprofile = "";
    string Filepath = "";
    string Uploadphoto = "";
    string Uplodpath = "";
    System.IO.FileInfo Dfile;
    bool V_CANCEL = false;
    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            if (Session["client_code"] != null || Session["usercode"] != null)
            {
                if (IsPostBack == false)
                {
                    Pageloaddetails();
                }
                else
                {
                    try
                    {
                        if (FileResUpload.HasFile || HRes_File.Value !="")
                        {
                            string[] FName = FileResUpload.FileName.Split('.');
                            string UPpath = FName[0] + GetDateTime() + "." + FName[1];
                            Uploadphoto = Path.GetFileName(UPpath);
                            Uplodpath = Server.MapPath("../uploads/" + Convert.ToString(Session["FolderName"]) + Uploadphoto);// + Session["ID"]   
                            FileResUpload.SaveAs(Uplodpath);
                            Res_File.Text = FileResUpload.FileName;
                            HRes_File.Value = Uplodpath;
                        }
                        if (FileLogoUpload.HasFile || HLogo_File.Value != "")
                        {
                            string[] FName = FileLogoUpload.FileName.Split('.');
                            string UPpath = FName[0] + GetDateTime() + "." + FName[1];
                            Uploadphoto = Path.GetFileName(UPpath);
                            Uplodpath = Server.MapPath("../uploads/" + Convert.ToString(Session["FolderName"]) + Uploadphoto);// + Session["ID"]   
                            FileLogoUpload.SaveAs(Uplodpath);
                            Logo_File.Text = FileLogoUpload.FileName;
                            HLogo_File.Value = Uplodpath;
                        }
                    }
                    catch
                    {

                    }
                }
            }
            else
            {
                Response.Redirect("Reg_Frm_Session_Expire.aspx", false);
            }

        }
        catch (Exception ex)
        {
            lblErrMsg.Visible = true;
            lblErrMsg.Text = ex.Message;
        }
    }

    private void Pageloaddetails()
    {
        try
        {
            if (Session["FolderName"] != null)
            {
                if (Directory.Exists(Server.MapPath("../uploads/" + Convert.ToString(Session["FolderName"]))) == true)
                {
                    Directory.Delete(Server.MapPath("../uploads/" + Convert.ToString(Session["FolderName"])), true);
                }
            }

            Random Ran = new Random();

            Session["FolderName"] = "EVSN_UPLOAD_" + Ran.Next(1, 10000).ToString() + "/";

            if (!Directory.Exists(Server.MapPath("../uploads/" + Convert.ToString(Session["FolderName"]))))
            {

                Directory.CreateDirectory(Server.MapPath("../uploads/" + Convert.ToString(Session["FolderName"])));
            }
        }
        catch
        {

        }

        client_code = Session["client_code"].ToString();
        user_code = Session["usercode"].ToString();
        client_code = Session["client_code"].ToString();
        user_code = Session["usercode"].ToString();
        location_code = Session["location_code"].ToString();
        Session["Issuer"] = "";
        Session["RTA"] = "";
        Session["EVRTA"] = "";
        Session["SCRUTINIZER"] = "";
        //ViewState["row"] = null;
        isin_details();

        // Hours_Load(ddl_hold_date_hrs);
        // Minutes_Load(ddl_hold_date_Mi);

        //Hours_Load(ddl_Vot_Start_Hours);
        //Minutes_Load(ddl_Vot_Start_Minutes);

        //Hours_Load(ddl_Vot_End_Time_hrs);
        //Minutes_Load(ddl_Vot_End_Time_Minutes);

        //Hours_Load(ddl_Meet_Start_Date_Time_Hrs);
        //Minutes_Load(ddl_Meet_Start_Date_Time_Mi);

        camparamname = "ARG_CLIENT_CODE$ARG_COMPANY_CODE$ARG_LOT_CODE$ARG_BATCH_NO$ARG_BOOK_NO$ARG_SNO$ARG_LOCATION_CODE$ARG_DOC_TYPE$ARG_FROM_NO$ARG_TO_NO$ARG_LOT_RECEIPT_DATE$ARG_USER_CODE$ARG_FROM_YEAR$ARG_TO_YEAR$ARG_CAF_MONTH$ARG_CREATED_DATE$ARG_NAME$ARG_TO_MONTH$ARG_FLAG";
        camparameter = Session["client_code"] + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + Session["usercode"].ToString() + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$20";
        camspcode = "CMS10";
        paramcount = 19;
        ws.Timeout = 9999999;
        ds = ws.ExDataSetFirst(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString());
        ws.Dispose();

        if (ds.Tables[0].Rows.Count > 0)//EV RTA .Rows[0][1].ToString() == "G199"
        {

            for (int i = 0; i <= ds.Tables[0].Rows.Count - 1; i++)
            {
                if (ds.Tables[0].Rows[i][1].ToString().Contains("G199"))

                    this.ddl_Rta.Items.Add(ds.Tables[0].Rows[i][0].ToString());
                else
                    this.ddl_Scrutinizer.Items.Add(ds.Tables[0].Rows[i][0].ToString());
            }
            ddl_Rta.Items.Insert(0, "--Select--");
            ddl_Scrutinizer.Items.Insert(0, "--Select--");

        }

        else
        {

        }

        camparamname = "ARG_CLIENT_CODE$ARG_COMPANY_CODE$ARG_LOT_CODE$ARG_BATCH_NO$ARG_BOOK_NO$ARG_SNO$ARG_LOCATION_CODE$ARG_DOC_TYPE$ARG_FROM_NO$ARG_TO_NO$ARG_LOT_RECEIPT_DATE$ARG_USER_CODE$ARG_FROM_YEAR$ARG_TO_YEAR$ARG_CAF_MONTH$ARG_CREATED_DATE$ARG_NAME$ARG_TO_MONTH$ARG_FLAG";
        camparameter = Session["client_code"] + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + Session["usercode"].ToString() + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$13";
        camspcode = "CMS10";
        paramcount = 19;
        ws.Timeout = 9999999;
        ds = ws.ExDataSetFirst(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString());
        ws.Dispose();

        if (ds.Tables[0].Rows[0][0].ToString() == "G198")//EV ISSUER
        {
            Session["Issuer"] = "G198";

            // Pnl_Personal_body1.Enabled = false;
            //imgCalander.Visible = false;
            //img1.Visible = false;
            //img2.Visible = false;
            FileResUpload.Enabled = false;
            FileLogoUpload.Enabled = false;
            Rom_File_Upload.Enabled = false;
            ddl_Disp_All_Infrm.Enabled = false;
            txt_Ltd_IPaddr.Enabled = false;
            // txt_Dply_Sru_conf_Status.Text = "NO";
            // txt_Dply_Sru_conf_Status.Enabled = false;
            Lbl_Rta_confm_status.Text = "NO";
            Lbl_Rta_confm_status.Enabled = false;
            FilePro_File1.Disabled = true;
            Upload_Photo1.Disabled = true;
            Txt_Res_Desc.Enabled = false;
            Txt_No_of_Res.Enabled = false;
            CollapsiblePanelExtender11.Collapsed = true;
            this.CollapsiblePanelExtender11.ClientState = "true";
            ddl_Evsn_Appr_Status.SelectedIndex = 0;
            ddl_Evsn_Appr_Status.Enabled = false;
            Txt_Vot_Start_Time.Enabled = false;
            Txt_Vot_End_Time.Enabled = false;
            Txt_Meet_Start_Date_Time.Enabled = false;
            txt_resno.Enabled = false;
            txtCaptcha.Visible = false;
            Image1.Visible = false;
            btn_refresh.Visible = false;
            Notice_file.Visible = false;
            Hold_date.Visible = false;
            txt_isin.Focus();
            BtnNew.Visible = true;
            return;
        }
        if (ds.Tables[0].Rows[0][0].ToString() == "G199")//EV RTA
        {
            Session["RTA"] = "G199";
            txt_isin.Enabled = false;
            txt_isin_name.Enabled = false;
            ddltype.Enabled = false;
            drp_evsn_type.Enabled = false;
            txt_Tot_Nof_Shares.Enabled = false;
            txt_nom_val.Enabled = false;
            txt_vot_rights.Enabled = false;
            Drp_Vot_rghts_rndoff.Enabled = false;
            Drp_Access_Via_Internet.Enabled = false;
            txt_Ltd_IPaddr.Enabled = false;
            ddl_Rta.Enabled = false;
            ddl_Scrutinizer.Enabled = false;
            Txt_Scrutinzer_Access.Enabled = false;
            ddl_All_Ball_Status.Enabled = false;
            ddl_Evsn_Appr_Status.Enabled = false;
            ddl_Disp_All_Infrm.Enabled = false;
            //txt_Dply_Sru_conf_Status.Text = "NO";
            //txt_Dply_Sru_conf_Status.Enabled = false;
            Lbl_Rta_confm_status.Text = "NO";
            Lbl_Rta_confm_status.Enabled = false;
            BtnNew.Visible = false;
            txt_resno.Enabled = true;
            // txt_Exist_Not_Filename.Enabled = true;
            Txt_Vot_Start_Time.Enabled = true;
            Txt_Vot_End_Time.Enabled = true;
            Txt_Meet_Start_Date_Time.Enabled = true;
            FileResUpload.Enabled = true;
            FileLogoUpload.Enabled = true;
            //Rom_File_Upload.Enabled = true;
            DropDownAbstain_vote.Enabled = false;
            FilePro_File1.Disabled = false;
            Upload_Photo1.Disabled = false;
            Txt_Res_Desc.Enabled = true;
            Txt_No_of_Res.Enabled = true;
            txtCaptcha.Visible = false;
            Image1.Visible = false;
            btn_refresh.Visible = false;
            Notice_file.Visible = true;
            Hold_date.Visible = true;
            //this.CollapsiblePanelExt_per.Collapsed = true;
            //this.CollapsiblePanelExt_per.ClientState = "true";
            //CollapsiblePanelExtender11.Collapsed = true;
            //this.CollapsiblePanelExtender11.ClientState = "true";
            //CollapsiblePanelExtender2.Collapsed = true;
            //this.CollapsiblePanelExtender2.ClientState = "true";
            ddl_isin_det.Focus();
            return;
        }
        if (ds.Tables[0].Rows[0][0].ToString() == "G200")//EV RTA APPROVER
        {
            Session["EVRTA"] = "G200";
            txt_isin.Enabled = false;
            txt_isin_name.Enabled = false;
            ddltype.Enabled = false;
            drp_evsn_type.Enabled = false;
            txt_Tot_Nof_Shares.Enabled = false;
            txt_nom_val.Enabled = false;
            txt_vot_rights.Enabled = false;
            Drp_Vot_rghts_rndoff.Enabled = false;
            Drp_Access_Via_Internet.Enabled = false;
            txt_Ltd_IPaddr.Enabled = false;
            ddl_Rta.Enabled = false;
            ddl_Scrutinizer.Enabled = false;
            Txt_Scrutinzer_Access.Enabled = false;
            ddl_All_Ball_Status.Enabled = false;
            ddl_Evsn_Appr_Status.Enabled = false;
            //txt_Exist_Not_Filename.Enabled = false;
            Txt_Vot_Start_Time.Enabled = false;
            Txt_Vot_End_Time.Enabled = false;
            Txt_Meet_Start_Date_Time.Enabled = false;
            FileResUpload.Enabled = false;
            FileLogoUpload.Enabled = false;
            Rom_File_Upload.Enabled = false;
            ddl_Disp_All_Infrm.Enabled = false;
            //txt_Dply_Sru_conf_Status.Text = "NO";
            //txt_Dply_Sru_conf_Status.Enabled = false;
            Lbl_Rta_confm_status.Text = "NO";
            Lbl_Rta_confm_status.Enabled = false;
            txt_hold_date.Enabled = false;
            FileUpload1.Enabled = false;
            ddl_Disp_All_Infrm.Enabled = true;
            txt_resno.Enabled = true;
            FilePro_File1.Disabled = true;
            Upload_Photo1.Disabled = true;
            Txt_Res_Desc.Enabled = false;
            Txt_No_of_Res.Enabled = false;
            DropDownAbstain_vote.Enabled = false;
            Change_Captcha();
            txtCaptcha.Visible = true;
            Image1.Visible = true;
            btn_refresh.Visible = true;
            txt_resno.Enabled = false;
            Btnadd.Visible = false;
            Res_File.Visible = false;
            Logo_File.Visible = false;
            BtnNew.Visible = false;
            remarks.Visible = true;
            remark1.Visible = true;
            ddl_isin_det.Focus();
            return;
        }
        if (ds.Tables[0].Rows[0][0].ToString() == "G201")//EV SCRUTINIZER
        {
            Session["SCRUTINIZER"] = "G201";
            txt_isin.Enabled = false;
            txt_isin_name.Enabled = false;
            ddltype.Enabled = false;
            drp_evsn_type.Enabled = false;
            txt_Tot_Nof_Shares.Enabled = false;
            txt_nom_val.Enabled = false;
            txt_vot_rights.Enabled = false;
            Drp_Vot_rghts_rndoff.Enabled = false;
            Drp_Access_Via_Internet.Enabled = false;
            txt_Ltd_IPaddr.Enabled = false;
            ddl_Rta.Enabled = false;
            ddl_Scrutinizer.Enabled = false;
            //txt_Dply_Sru_conf_Status.Enabled = false;
            Lbl_Rta_confm_status.Enabled = false;
            Txt_Scrutinzer_Access.Enabled = false;
            ddl_All_Ball_Status.Enabled = false;
            ddl_Evsn_Appr_Status.Enabled = false;
            //txt_Exist_Not_Filename.Enabled = false;
            Txt_Vot_Start_Time.Enabled = false;
            Txt_Vot_End_Time.Enabled = false;
            Txt_Meet_Start_Date_Time.Enabled = false;
            FileResUpload.Enabled = false;
            FileLogoUpload.Enabled = false;
            Rom_File_Upload.Enabled = false;
            FilePro_File1.Disabled = true;
            Upload_Photo1.Disabled = true;
            Txt_Res_Desc.Enabled = false;
            Txt_No_of_Res.Enabled = false;
            txt_hold_date.Enabled = false;
            FileUpload1.Enabled = false;
            ddl_Disp_All_Infrm.Enabled = false;
            BtnNew.Visible = false;
            txtCaptcha.Visible = false;
            Image1.Visible = false;
            btn_refresh.Visible = false;
            ddl_isin_det.Focus();
            return;
        }
        if (ds.Tables[0].Rows[0][0].ToString() == "G202")//EV SHAREHOLDER
        {
            BtnNew.Visible = false;
            return;
        }


        if (ds.Tables[0].Columns[0].ColumnName.ToUpper() == "EXCEPTION")
        {
            lblErrMsg.Visible = true;
            lblErrMsg.ForeColor = Color.Red;
            lblErrMsg.Text = ds.Tables[0].Rows[0][0].ToString();
            return;
        }
    }



    public string GetDateTime()
    {
        string Result = "";
        Result = DateTime.Now.Day.ToString() + "_" + DateTime.Now.Month.ToString() + "_" + DateTime.Now.Year.ToString() + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Millisecond;
        return Result;
    }

    private void isin_details()
    {
        try
        {

            camparamname = "ARG_CLIENT_CODE$ARG_COMPANY_CODE$ARG_LOT_CODE$ARG_BATCH_NO$ARG_BOOK_NO$ARG_SNO$ARG_LOCATION_CODE$ARG_DOC_TYPE$ARG_FROM_NO$ARG_TO_NO$ARG_LOT_RECEIPT_DATE$ARG_USER_CODE$ARG_FROM_YEAR$ARG_TO_YEAR$ARG_CAF_MONTH$ARG_CREATED_DATE$ARG_NAME$ARG_TO_MONTH$ARG_FLAG";
            camparameter = Session["client_code"] + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + Session["usercode"].ToString() + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$14";
            camspcode = "CMS10";
            paramcount = 19;
            ws.Timeout = 9999999;
            ds3.Clear();
            ds3 = ws.ExDataSetFirst(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString());
            ws.Dispose();

            if (ds3.Tables[0].Rows.Count > 0 && ds3.Tables[0].Columns[0].ColumnName.ToUpper() == "AGM_ID")
            {

                dt = ds3.Tables[0];
                ddl_isin_det.DataSource = dt;
                ddl_isin_det.DataTextField = "AGM_ID";
                //ddl_isin_det.DataValueField = "ISIN";
                ddl_isin_det.DataBind();
                ddl_isin_det.Items.Insert(0, "Select");
                ddl_isin_det.SelectedIndex = 0;

            }
            else
            {
                txt_isin.Focus();
                ddl_isin_det.Items.Clear();
                ddl_isin_det.Items.Insert(0, "Select");
            }
        }
        catch (Exception ex)
        {
            lblErrMsg.Visible = true;
            lblErrMsg.Text = ex.Message;
        }
    }
    protected void btnSubmit_Click(object sender, EventArgs e)
    {
        try
        {
            lblErrMsg.Visible = false;
            lblMsg.Visible = false;
            lblErrMsg.Text = "";
            lblMsg.Text = "";
            string[] ddl_evsn_agm;

            byte[] P_Blob_image1 = new Byte[64];
            byte[] P_Blob_image2 = new Byte[64];
            byte[] P_Blob_image3 = new Byte[64];
            byte[] P_Blob_image4 = new Byte[64];
            byte[] P_Blob_image5 = new Byte[64];
            byte[] P_Blob_image6 = new Byte[64];

            string FileRes_Upload = "";
            string FileRes_extn = "";
            string FileRespath = "";
            string Uploadphoto = "";
            string Uploadphoto_extn = "";
            string Uplodpath = "";
            string Rom_File = "";
            string Rom_File_extn = "";
            string Rom_Filepath = "";
            string FileRes_filename = "";
            string Uploadphoto_filename = "";
            string Rom_File_filename = "";

            string Upload_Notice_File = "";
            string Upload_Notice_File_format = "";
            string Upload_Notice_File_size = "";
            string Upload_notice_path = "";
            string[] rta_code;
            string[] Scrutinizer_det;

            int Uplaod_Notice_Img_Size = 0;
            int File_Res_Img_Size = 0;
            int Upload_Photo_Img_Size = 0;
            int Rom_File_Img_Size = 0;
            # region
            if (Session["Issuer"] == "G198")
            {
                /* Validation Details*/

                if (txt_isin.Text.Trim() == "")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Enter the ISIN Number";
                    txt_isin.Focus();
                    return;
                }

                if (txt_isin_name.Text.Trim() == "")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Enter the ISIN Name";
                    txt_isin_name.Focus();
                    return;
                }

                if (ddltype.SelectedItem.Text.Trim() == "")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Enter the ISIN Name";
                    txt_isin_name.Focus();
                    return;
                }

                if (ddltype.SelectedItem.Text.Trim() == "--Select--")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Choose the Type";
                    ddltype.Focus();
                    return;
                }

                if (drp_evsn_type.SelectedItem.Text.Trim() == "--Select--")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Choose the Evsn Type";
                    drp_evsn_type.Focus();
                    return;
                }

                if (txt_Tot_Nof_Shares.Text.Trim() == "")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Enter the No.of Shares";
                    txt_Tot_Nof_Shares.Focus();
                    return;
                }

                Regex nonNumericRegex = new Regex(@"\D");
                if (nonNumericRegex.IsMatch(txt_Tot_Nof_Shares.Text))
                {
                    //Contains non numeric characters.
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Invalid  No.of Shares";
                    txt_Tot_Nof_Shares.Focus();
                    return;
                }

                if (txt_nom_val.Text.Trim() == "")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Enter the Nominal Value";
                    lblnomvalue.Focus();
                    return;
                }
                if (nonNumericRegex.IsMatch(txt_nom_val.Text))
                {
                    //Contains non numeric characters.
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Invalid  Nominal Value";
                    txt_nom_val.Focus();
                    return;
                }

                if (txt_vot_rights.Text.Trim() == "")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Enter the Voting Rights";
                    txt_vot_rights.Focus();
                    return;
                }
                if (nonNumericRegex.IsMatch(txt_vot_rights.Text))
                {
                    //Contains non numeric characters.
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Invalid  Voting Rights";
                    txt_vot_rights.Focus();
                    return;
                }

                if (Drp_Vot_rghts_rndoff.SelectedItem.Text.Trim() == "--Select--")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Choose the Voting Rights Round OFF";
                    Drp_Vot_rghts_rndoff.Focus();
                    return;
                }

                if (Drp_Access_Via_Internet.SelectedItem.Text.Trim() == "--Select--")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Choose the Access Via Internet";
                    Drp_Access_Via_Internet.Focus();
                    return;
                }

                if (Drp_Access_Via_Internet.SelectedItem.Text.Trim() == "Limited")
                {
                    if (txt_Ltd_IPaddr.Text.Trim() == "")
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "";
                        txt_Ltd_IPaddr.Focus();
                        return;
                    }
                }

                if (ddl_Scrutinizer.SelectedItem.Text.Trim() == "--Select--")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Choose the Scrutinizer";
                    ddl_Scrutinizer.Focus();
                    return;
                }
                if (ddl_Rta.SelectedItem.Text.Trim() == "--Select--")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Choose the Rta Maker";
                    ddl_Rta.Focus();
                    return;
                }
                if (DropDownAbstain_vote.Text.Trim() == "---Select--")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Choose the Abstain Vote";
                    ddl_Scrutinizer.Focus();
                    return;

                }

                if (Txt_Scrutinzer_Access.Text.Trim() == "")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Enter the Scrutinzer Access Days";
                    Txt_Scrutinzer_Access.Focus();
                    return;

                }

                int Scrutinzer_Access = Convert.ToInt32(Txt_Scrutinzer_Access.Text.Trim());
                if (Scrutinzer_Access > 30 || Scrutinzer_Access < 1)
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Invalid Scrutinzer Access Days";
                    Txt_Scrutinzer_Access.Focus();
                    return;
                }

                if (Lbl_Rta_confm_status.Text == "Yes")
                {
                    if (ddl_Evsn_Appr_Status.SelectedItem.Text.Trim() == "--Select--")
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Choose the EVSN Approval Status";
                        ddl_Evsn_Appr_Status.Focus();
                        return;

                    }
                    if (ddl_Evsn_Appr_Status.SelectedItem.Text.Trim() == "No")
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Should be give Approve for this EVSN ID. ";
                        ddl_Evsn_Appr_Status.Focus();
                        return;

                    }



                    if (ddl_Evsn_Appr_Status.SelectedItem.Text.Trim() == "Yes")
                    {
                        ddl_evsn_agm = ddl_isin_det.SelectedItem.Text.ToString().Trim().Split('-');

                        camparamname = "ARG_CLIENT_CODE$ARG_COMPANY_CODE$ARG_LOT_CODE$ARG_BATCH_NO$ARG_BOOK_NO$ARG_SNO$ARG_LOCATION_CODE$ARG_DOC_TYPE$ARG_FROM_NO$ARG_TO_NO$ARG_LOT_RECEIPT_DATE$ARG_USER_CODE$ARG_FROM_YEAR$ARG_TO_YEAR$ARG_CAF_MONTH$ARG_CREATED_DATE$ARG_NAME$ARG_TO_MONTH$ARG_FLAG";
                        camparameter = Session["client_code"] + "$" + "" + "$" + ddl_Evsn_Appr_Status.SelectedItem.Text.ToString().Substring(0, 1).ToUpper() + "$" + ddl_evsn_agm[0].ToString().Trim() + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + Session["usercode"].ToString() + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$45";
                        camspcode = "CMS10";
                        paramcount = 19;
                        ws.Timeout = 9999999;
                        ds = ws.ExDataSetFirst(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString());
                        ws.Dispose();

                        if (ds.Tables[0].Columns[0].ColumnName.ToString() == "INFO")//ds.Tables[0].Rows[0][0].ToString()
                        {
                            btnClear_Click(sender, e);
                            lblMsg.Visible = true;
                            lblMsg.Text = "EVSN " + ds.Tables[0].Rows[0][0].ToString() + ". ID No :  " + ddl_evsn_agm[0].ToString().Trim(); ;
                            // isin_details();
                            txtremark.Text = "";
                            //Clear("C");
                            ddl_isin_det.Focus();
                            return;
                        }

                        else
                        {
                            lblErrMsg.Visible = true;
                            lblErrMsg.Text = ds.Tables[0].Rows[0][0].ToString();
                            return;
                        }
                    }
                }


                if (txt_hold_date.Text != "" && txt_hold_date.Text != "__/__/____")
                {
                    DateTime t10 = new DateTime();

                    if (!DateTime.TryParseExact(txt_hold_date.Text, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out t10))// hh:mm:tt
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Invalid Holding Date ( Cut Off Date )";
                        txt_hold_date.Focus();
                        return;
                    }
                    else
                    {
                        txt_hold_date.Text = t10.ToString("dd/MM/yyyy");
                    }

                    if (Session["Startdate"] != null)
                    {
                        if (t10.Date >= ((DateTime)Session["Startdate"]).Date)
                        {
                            lblErrMsg.Visible = true;
                            lblErrMsg.Text = "   Holding date (" + txt_hold_date.Text + " ) shouldn't be Greater than Start Date";
                            //Txt_Vot_Start_Time.Text = "";
                            txt_hold_date.Focus();
                            return;
                        }
                    }
                }

                if (FileUpload1.HasFile == true)
                {
                    if (txt_hold_date.Text == "__/__/____" || txt_hold_date.Text == "")
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Kindly Enter Holding Date ( Cut Off Date )";
                        Txt_Meet_Start_Date_Time.Focus();
                        return;
                    }
                    Upload_Notice_File = Path.GetFileName(FileUpload1.FileName);
                    Upload_Notice_File_format = Path.GetFileNameWithoutExtension(FileUpload1.FileName);
                    Upload_Notice_File_size = Upload_Notice_File.Substring((Convert.ToInt32(Upload_Notice_File.Length) - 3), 3);
                    Uplaod_Notice_Img_Size = (FileUpload1.PostedFile.ContentLength / 1024) / 1024;

                    if (Upload_Notice_File_size.ToLower() == "pdf" || Upload_Notice_File_size.ToLower() == "doc")
                    {
                    }
                    else
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Upload Notice File Image Should be PDF (or) DOC.";
                        FileUpload1.Focus();
                        return;
                    }

                    if (Uplaod_Notice_Img_Size > 2) // Allow only files less than 2,100,000 bytes (approximately 2 MB) to be uploaded.
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Upload Notice File Image Should Less than 2 MB size limit.";
                        FileUpload1.Focus();
                        return;
                    }

                }


            }
            if (Session["RTA"] == "G199")
            {
                DateTime t5 = new DateTime();
                if (ddl_isin_det.SelectedItem.Text == "" || ddl_isin_det.SelectedItem.Text.ToString() == "Select")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Kindly Select ISIN Details";
                    ddl_isin_det.Focus();
                    return;
                }
                if (HRes_File.Value == "")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Choose Resolution File";
                    FileResUpload.Focus();
                    return;
                }
                if (HLogo_File.Value == "")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Choose Logo File";
                    FileLogoUpload.Focus();
                    return;
                }

                if (Txt_Vot_Start_Time.Text == "__/__/____ __:__")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Kindly Enter the Voting Start Date and Time";
                    Txt_Vot_Start_Time.Focus();
                    return;
                }

                if (Txt_Vot_End_Time.Text == "__/__/____")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Kindly Enter the Voting End Date";
                    Txt_Vot_End_Time.Focus();
                    return;
                }
                if (Txt_Meet_Start_Date_Time.Text == "__/__/____ __:__")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Kindly Enter the Meeting Start Date and Time";
                    Txt_Meet_Start_Date_Time.Focus();
                    return;
                }




                string Voting_start_date = "";
                string Voting_start_datehrs = "";
                lblErrMsg.Text = "";
                if (Txt_Vot_Start_Time.Text.ToString() == "")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Kindly Enter Voting Start Date and Time";
                    Txt_Vot_Start_Time.Focus();
                    return;
                }
                if (Txt_Vot_End_Time.Text.ToString() == "")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Kindly Enter Voting End Date";
                    Txt_Vot_End_Time.Focus();
                    return;
                }


                string Voting_end_date = "";
                string Voting_end_datehrs = "";
                DateTime startDate = new DateTime();
                string[] txt_vo;
                string[] Vote_end_hrs;

                txt_vo = Txt_Vot_Start_Time.Text.ToString().Split(' ');
                Voting_start_date = Txt_Vot_Start_Time.Text.ToString().Split(' ')[0];
                Voting_start_datehrs = txt_vo[1].ToString().Substring(0, 2);



                Vote_end_hrs = (Txt_Vot_End_Time.Text.ToString() + " 17:00").Split(' ');
                Voting_end_date = (Txt_Vot_End_Time.Text.ToString() + " 17:00").Split(' ')[0];
                Voting_end_datehrs = Vote_end_hrs[1].ToString().Substring(0, 2);





                DateTime t2 = new DateTime();
                if (!DateTime.TryParseExact(Txt_Vot_Start_Time.Text, "dd/MM/yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out t2))// hh:mm:tt
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Invalid Voting Start Date and Time";
                    Txt_Vot_Start_Time.Focus();
                    return;
                }
                else
                {
                    Session["Startdate"] = t2;
                    Txt_Vot_Start_Time.Text = t2.ToString("dd/MM/yyyy HH:mm");
                }

                if (t2.Date < DateTime.Now.Date)
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Start date (" + Txt_Vot_Start_Time.Text + " ) shouldn't be less than Current Date";
                    //Txt_Vot_Start_Time.Text = "";
                    Txt_Vot_Start_Time.Focus();
                    return;
                }

                DateTime t1 = new DateTime();
                if (!DateTime.TryParseExact((Txt_Vot_End_Time.Text.ToString() + " 17:00"), "dd/MM/yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out t1))// hh:mm:tt
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Invalid Voting End Date and Time (" + Txt_Vot_End_Time.Text + " )";
                    // Txt_Vot_End_Time.Text = "";
                    Txt_Vot_End_Time.Focus();

                    return;
                }
                else
                {
                    Session["enddat"] = t1;
                    Txt_Vot_End_Time.Text = t1.ToString("dd/MM/yyyy");
                }

                if (Voting_end_date == Voting_start_date)
                {
                    TimeSpan ts = t1.Subtract(t2);
                    if (Convert.ToInt32(ts.ToString().Split(':')[0]) < 2)
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Voting End time and Start time should be between 2 Hrs ";
                        lblErrMsg.ForeColor = System.Drawing.Color.Red;
                        return;
                    }
                }
                else
                {
                    int days = Convert.ToInt32((t1 - t2).TotalDays);
                    if (days < 3)
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Voting End date and Start date should be between 3 days ";
                        lblErrMsg.ForeColor = System.Drawing.Color.Red;
                        return;
                    }
                    else
                    {
                        Txt_Meet_Start_Date_Time.Focus();
                        //return;
                    }
                }

                DateTime t3 = new DateTime();
                if (!DateTime.TryParseExact(Txt_Meet_Start_Date_Time.Text, "dd/MM/yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out t3))// hh:mm:tt
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Invalid Voting Meeting Start Date /Time (" + Txt_Meet_Start_Date_Time.Text + ")";
                    //Txt_Meet_Start_Date_Time.Text = "";
                    Txt_Meet_Start_Date_Time.Focus();
                    return;
                }
                else
                {
                    Txt_Meet_Start_Date_Time.Text = t3.ToString("dd/MM/yyyy HH:mm");
                }

                if (Session["enddat"] != null)
                {
                    if (t3.Date < ((DateTime)Session["enddat"]).Date)
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Meeting date (" + Txt_Meet_Start_Date_Time.Text + " ) shouldn't be Less than End date";
                        //Txt_Meet_Start_Date_Time.Text = "";
                        Txt_Meet_Start_Date_Time.Focus();
                        return;
                    }
                }


                if (txt_hold_date.Text == "__/__/____" || txt_hold_date.Text == "")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Kindly Enter Holding Date ( Cut Off Date )";
                    Txt_Meet_Start_Date_Time.Focus();
                    return;
                }

                if (!DateTime.TryParseExact(txt_hold_date.Text, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out t5))// hh:mm:tt
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Invalid Holding Date ( Cut Off Date )";
                    txt_hold_date.Focus();
                    return;
                }
                else
                {
                    txt_hold_date.Text = t5.ToString("dd/MM/yyyy");
                }

                if (Session["Startdate"] != null)
                {
                    if (t5.Date >= ((DateTime)Session["Startdate"]).Date)
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "   Holding date (" + txt_hold_date.Text + " ) shouldn't be Greater than or equal to Start Date";
                        //Txt_Vot_Start_Time.Text = "";
                        txt_hold_date.Focus();
                        return;
                    }
                }

                if (FileUpload1.HasFile == false && Fileupload.Text == "Upload Notice File")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Kindly upload Notice File Image.It Should be PDF (or) DOC.";
                    //Txt_Meet_Start_Date_Time.Text = "";
                    FileUpload1.Focus();
                    return;
                }

                //if(Fileupload.Text=="")
                //{
                //    lblErrMsg.Visible = true;
                //    lblErrMsg.Text = "Kindly upload Notice File Image.It Should be PDF (or) DOC.";
                //     FileUpload1.Focus();
                //    return;
                //}


                //if (Rom_File_Upload.HasFile == false)
                //{
                //    lblErrMsg.Visible = true;
                //    lblErrMsg.Text = "Choose Rom File";
                //    Rom_File_Upload.Focus();
                //    return;
                //}
            }

            if (Session["EVRTA"] == "G200")
            {
                if (ddl_isin_det.SelectedItem.Text == "" || ddl_isin_det.SelectedItem.Text.ToString() == "Select")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Kindly Select ISIN Details";
                    ddl_isin_det.Focus();
                    return;
                }
                //if (Txt_No_of_Res.Text == "")
                //{
                //    lblErrMsg.Visible = true;
                //    lblErrMsg.Text = "Kindly Enter the Number Of Resolution";
                //    Txt_No_of_Res.Focus();
                //    return;
                //}
                //if (Txt_Res_Desc.Text == "")
                //{
                //    lblErrMsg.Visible = true;
                //    lblErrMsg.Text = "Kindly Enter the Resolution Desc";
                //    Txt_Res_Desc.Focus();
                //    return;
                //}
                //if (FilePro_File.HasFile == false)
                //{
                //    lblErrMsg.Visible = true;
                //    lblErrMsg.Text = "Choose Logo File";
                //    FilePro_File.Focus();
                //    return;
                //}
                //if (Upload_Photo.HasFile == false)
                //{
                //    lblErrMsg.Visible = true;
                //    lblErrMsg.Text = "Choose Logo File";
                //    Upload_Photo.Focus();
                //    return;
                //}

            }

            //Session["SCRUTINIZER"] = "G201";
            if (Session["SCRUTINIZER"] == "G201")
            {
                if (ddl_isin_det.SelectedItem.Text == "" || ddl_isin_det.SelectedItem.Text.ToString() == "Select")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Kindly Select ISIN Details";
                    ddl_isin_det.Focus();
                    return;
                }
            }


            # endregion

            if (Session["RTA"] == "G199")//Session["Issuer"] == "G198" ||
            {
                DateTime t4 = new DateTime();

                if (!DateTime.TryParseExact(txt_hold_date.Text, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out t4))// hh:mm:tt
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Invalid Holding Date ( Cut Off Date )";
                    txt_hold_date.Focus();
                    return;
                }
                else
                {
                    txt_hold_date.Text = t4.ToString("dd/MM/yyyy");
                }

                if (Session["Startdate"] != null)
                {
                    if (t4.Date >= ((DateTime)Session["Startdate"]).Date)
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "   Holding date (" + txt_hold_date.Text + " ) shouldn't be Greater than Start Date";
                        //Txt_Vot_Start_Time.Text = "";
                        txt_hold_date.Focus();
                        return;
                    }
                }

                if (FileUpload1.HasFile == true)
                {
                    Upload_Notice_File = Path.GetFileName(FileUpload1.FileName);
                    Upload_Notice_File_format = Path.GetFileNameWithoutExtension(FileUpload1.FileName);
                    Upload_Notice_File_size = Upload_Notice_File.Substring((Convert.ToInt32(Upload_Notice_File.Length) - 3), 3);
                    Uplaod_Notice_Img_Size = (FileUpload1.PostedFile.ContentLength / 1024) / 1024;

                    if (Upload_Notice_File_size.ToLower() == "pdf" || Upload_Notice_File_size.ToLower() == "doc")
                    {
                    }
                    else
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Upload Notice File Image Should be PDF (or) DOC.";
                        FileUpload1.Focus();
                        return;
                    }

                    if (Uplaod_Notice_Img_Size > 2) // Allow only files less than 2,100,000 bytes (approximately 2 MB) to be uploaded.
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Upload Notice File Image Should Less than 2 MB size limit.";
                        FileUpload1.Focus();
                        return;
                    }

                }

                //else
                //{
                //    lblErrMsg.Visible = true;
                //    lblErrMsg.Text = "Upload Notice File Image Should Less than 2 MB size limit.";
                //    FileUpload1.Focus();
                //    return;

                //}





                //else
                //{
                //    lblErrMsg.Visible = true;
                //    lblErrMsg.Text = "Kindly upload Notice File Image.It Should be PDF (or) DOC.";
                //    FileUpload1.Focus();
                //    return;

                //}
            }

            if (Session["RTA"] == "G199")
            {

                FileRes_Upload = Path.GetFileName(HRes_File.Value);
                FileRes_filename = Path.GetFileNameWithoutExtension(HRes_File.Value);
                FileRes_extn = FileRes_Upload.Substring((Convert.ToInt32(FileRes_Upload.Length) - 3), 3);
                byte[] bytfile = ReadFile(HRes_File.Value);
                File_Res_Img_Size = (bytfile.Length / 1024) / 1024;
                P_Blob_image1 = bytfile;
                Uploadphoto = Path.GetFileName(HLogo_File.Value);
                Uploadphoto_filename = Path.GetFileNameWithoutExtension(HLogo_File.Value);
                Uploadphoto_extn = Uploadphoto.Substring((Convert.ToInt32(Uploadphoto.Length) - 3), 3);
                bytfile = ReadFile(HLogo_File.Value);
                Upload_Photo_Img_Size = (bytfile.Length / 1024) / 1024;
                P_Blob_image2 = bytfile;
                //Rom_File = Path.GetFileName(Rom_File_Upload.FileName);
                //Rom_File_filename = Path.GetFileNameWithoutExtension(Rom_File_Upload.FileName);
                //Rom_File_extn = Rom_File.Substring((Convert.ToInt32(Rom_File.Length) - 3), 3);
                //Rom_File_Img_Size = (Rom_File_Upload.PostedFile.ContentLength / 1024) / 1024;


                if (File_Res_Img_Size > 2) // Allow only files less than 2,100,000 bytes (approximately 2 MB) to be uploaded.
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Resolution File Image Should Less than 2 MB size limit.";
                    FileResUpload.Focus();
                    return;
                }
                if (FileRes_extn.ToLower() != "jpg")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Resolution File Image Should be jpg format only.";
                    FileResUpload.Focus();
                    return;

                }
                if (Upload_Photo_Img_Size > 2) // Allow only files less than 2,100,000 bytes (approximately 2 MB) to be uploaded.
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Logo File Image Should Less than 2 MB size limit.";
                    FileLogoUpload.Focus();
                    return;
                }
                if (Uploadphoto_extn.ToLower() != "jpg")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Logo File Image Should be jpg format only.";
                    FileLogoUpload.Focus();
                    return;

                }
                //if (Rom_File_Img_Size > 2) // Allow only files less than 2,100,000 bytes (approximately 2 MB) to be uploaded.
                //{
                //    lblErrMsg.Visible = true;
                //    lblErrMsg.Text = "Rom File Image Should Less than 2 MB size limit.";
                //    Rom_File_Upload.Focus();
                //    return;
                //}

                if (Txt_No_of_Res.Text != GridView1.Rows.Count.ToString())
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Count Mismatch";
                    Btnadd.Enabled = true;
                    return;
                }


            }
            //<?xml version = " + (Char)34 + "1.0" + (Char)34 + " encoding = " + (Char)34 + "UTF-8" + (Char)34 + " ?>
            string xmlval;
            int funval = 0;
            xmlval = "<ROWSET>";
            xmlval = xmlval + "<ROW num= " + (Char)34 + "0" + (Char)34 + " >";

            for (int i = 1; i <= 41; i++)
            {
                if (i == 1)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + txt_isin.Text.Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 2)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + txt_isin_name.Text.ToString().Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 3)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + ddltype.SelectedItem.Text.ToString().Trim().Substring(0, 1).ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 4)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + drp_evsn_type.SelectedItem.Text.ToString().Trim().Substring(0, 1).ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 5)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + txt_Tot_Nof_Shares.Text.Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 6)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + txt_nom_val.Text.Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 7)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + txt_vot_rights.Text.ToString().Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 8)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + Drp_Vot_rghts_rndoff.SelectedItem.Text.ToString().Trim().Substring(0, 1).ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 9)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + Drp_Access_Via_Internet.SelectedItem.Text.ToString().Trim().Substring(0, 1).ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 10)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + txt_Ltd_IPaddr.Text.ToString().Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 11)
                {

                    rta_code = ddl_Rta.SelectedItem.Text.Trim().Split('-');
                    xmlval = xmlval + "<F" + (funval + i) + ">" + rta_code[0].ToString().Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 12)
                {
                    Scrutinizer_det = ddl_Scrutinizer.SelectedItem.Text.Trim().Split('-');
                    xmlval = xmlval + "<F" + (funval + i) + ">" + Scrutinizer_det[0].ToString().Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 13)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + Lbl_Rta_confm_status.Text.ToString().Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 14)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + Txt_Scrutinzer_Access.Text.ToString().Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 15)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + ddl_All_Ball_Status.SelectedItem.Text.ToString().Trim().Substring(0, 1).ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 16)
                {
                    // if (ddl_Evsn_Appr_Status.SelectedItem.Text.ToString() != "--Select--")
                    //{
                    xmlval = xmlval + "<F" + (funval + i) + ">" + ddl_Evsn_Appr_Status.SelectedItem.Text.ToString().Trim().Substring(0, 1).ToUpper() + "</F" + (funval + i) + ">";
                    // }
                }
                else if (i == 17)
                {
                    //xmlval = xmlval + "<F" + (funval + i) + ">" + txt_Exist_Not_Filename.Text.ToString().Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 18)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + Txt_Vot_Start_Time.Text.ToString().Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 19)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + Txt_Vot_End_Time.Text.ToString().Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 20)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + Txt_Meet_Start_Date_Time.Text.ToString().Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 21)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + string.Empty + "</F" + (funval + i) + ">";
                }
                else if (i == 22)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + Txt_No_of_Res.Text.ToString().Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 23)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + Txt_Res_Desc.Text.ToString().Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 24)
                {
                    string Holddattime = "";
                    string str = txt_hold_date.Text;
                    //DateTime date = DateTime.ParseExact(txt_hold_date.Text.Trim(), "dd/MM/yyyy", null);
                    DateTime date = new DateTime();
                    DateTime.TryParseExact(str, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out date);// hh:mm:tt
                    string FormattedDate = date.ToString("MM/dd/yyyy");

                    //Holddattime = FormattedDate + " " + ddl_hold_date_hrs.SelectedItem.Text.Trim() + ":" + ddl_hold_date_Mi.SelectedItem.Text.Trim();
                    xmlval = xmlval + "<F" + (funval + i) + ">" + FormattedDate + "</F" + (funval + i) + ">";
                }
                else if (i == 25)
                {

                    // xmlval = xmlval + "<F" + (funval + i) + ">" + txt_Exist_Not_Filename.Text.ToString().Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 26)
                {
                    if (Txt_Vot_Start_Time.Text != "")
                    {
                        string Holddattime = "";
                        string str = Txt_Vot_Start_Time.Text;
                        DateTime date = new DateTime();
                        DateTime.TryParseExact(str, "dd/MM/yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out date);// hh:mm:tt
                        string FormattedDate = date.ToString("dd-MM-yyyy HH:mm");
                        // Holddattime = FormattedDate + " " + ddl_Vot_Start_Hours.SelectedItem.Text.Trim() + ":" + ddl_Vot_Start_Minutes.SelectedItem.Text.Trim();

                        xmlval = xmlval + "<F" + (funval + i) + ">" + FormattedDate + "</F" + (funval + i) + ">";
                    }
                    else
                    {

                    }
                }
                else if (i == 27)
                {
                    if (Txt_Vot_End_Time.Text.Trim() != "")
                    {
                        string Holddattime = "";
                        string str = (Txt_Vot_End_Time.Text.ToString() + " 17:00");
                        DateTime date = new DateTime();
                        DateTime.TryParseExact(str, "dd/MM/yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out date);// hh:mm:tt
                        string FormattedDate = date.ToString("dd-MM-yyyy HH:mm");
                        //Holddattime = FormattedDate + " " + ddl_Vot_End_Time_hrs.SelectedItem.Text.Trim() + ":" + ddl_Vot_End_Time_Minutes.SelectedItem.Text.Trim();

                        xmlval = xmlval + "<F" + (funval + i) + ">" + FormattedDate + "</F" + (funval + i) + ">";
                    }
                    else
                    {

                    }
                    //xmlval = xmlval + "<F" + (funval + i) + ">" + Txt_Vot_End_Time.Text.ToString().Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 28)
                {
                    if (Txt_Meet_Start_Date_Time.Text.Trim() != "")
                    {
                        string Holddattime = "";
                        string str = Txt_Meet_Start_Date_Time.Text;
                        DateTime date = new DateTime();
                        DateTime.TryParseExact(str, "dd/MM/yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out date);// hh:mm:tt
                        string FormattedDate = date.ToString("dd-MM-yyyy HH:mm");
                        //Holddattime = FormattedDate + " " + ddl_Meet_Start_Date_Time_Hrs.SelectedItem.Text.Trim() + ":" + ddl_Meet_Start_Date_Time_Mi.SelectedItem.Text.Trim();

                        xmlval = xmlval + "<F" + (funval + i) + ">" + FormattedDate + "</F" + (funval + i) + ">";
                    }
                    else
                    {

                    }
                    //xmlval = xmlval + "<F" + (funval + i) + ">" + Txt_Meet_Start_Date_Time.Text.ToString().Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 29)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + FileRes_filename.ToString().Trim() + "</F" + (funval + i) + ">";
                }
                else if (i == 30)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + FileRes_extn.ToString().Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 31)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + P_Blob_image1.Length + "</F" + (funval + i) + ">";
                }

                else if (i == 32)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + Uploadphoto_filename.ToString().Trim() + "</F" + (funval + i) + ">";
                }
                else if (i == 33)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + Uploadphoto_extn.ToString().Trim().ToUpper() + "</F" + (funval + i) + ">";
                }
                else if (i == 34)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + P_Blob_image2.Length + "</F" + (funval + i) + ">";
                }

                else if (i == 35)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + string.Empty + "</F" + (funval + i) + ">";
                }
                else if (i == 36)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + string.Empty + "</F" + (funval + i) + ">";
                }
                else if (i == 37)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + P_Blob_image3.Length + "</F" + (funval + i) + ">";
                }
                else if (i == 38)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + Upload_Notice_File_format + "</F" + (funval + i) + ">";
                }
                else if (i == 39)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + Upload_Notice_File_size + "</F" + (funval + i) + ">";
                }
                else if (i == 40)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + P_Blob_image4.Length + "</F" + (funval + i) + ">";
                }
                else if (i == 41)
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + DropDownAbstain_vote.SelectedItem.Text.ToString().Trim().Substring(0, 1).ToUpper() + "</F" + (funval + i) + ">";
                }
                else
                {
                    xmlval = xmlval + "<F" + (funval + i) + ">" + "" + "</F" + (funval + i) + ">";
                }
            }
            xmlval = xmlval + "</ROW>";
            xmlval = xmlval + "</ROWSET>";
            xmlval = xmlval.Replace("&nbsp;", "");
            xmlval = xmlval.Replace("&NBSP;", "");

            if (Session["Issuer"] == "G198")
            {
                ddl_evsn_agm = ddl_isin_det.SelectedItem.Text.ToString().Trim().Split('-');
                string ddl_ensn_det = "";
                ddl_ensn_det = ddl_evsn_agm[0].ToString().Trim();



                if (ddl_ensn_det != "Select")//ddl_isin_det.SelectedIndex > -1
                {

                    if (txt_hold_date.Text == "__/__/____" || txt_hold_date.Text == "")
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Kindly Enter Holding Date ( Cut Off Date )";
                        Txt_Meet_Start_Date_Time.Focus();
                        return;
                    }

                    camparamname = "arg_clientcode$arg_loc_code$arg_batchno$arg_sno$arg_user_code$arg_xmlvalue$arg_flag";
                    user_code = Session["usercode"].ToString();
                    client_code = Session["client_code"].ToString();
                    location_code = Session["location_code"].ToString();
                    camspcode = "CMS100";
                    paramcount = 7;
                    ws.Timeout = 9999999;
                    //camparameter = client_code + "$" + location_code + "$" + ddl_evsn_agm[0].ToString().Trim() + "$" + string.Empty + "$" + user_code + "$" + xmlval + "$3";
                    camparameter = client_code + "$" + "U1" + "$" + ddl_evsn_agm[0].ToString().Trim() + "$" + string.Empty + "$" + user_code + "$" + xmlval + "$3";
                    ds = ws.ExDataSetFirst_blobs(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString(), P_Blob_image1, P_Blob_image2, P_Blob_image3, P_Blob_image4, P_Blob_image5, P_Blob_image6);
                    ws.Dispose();

                    if (ds.Tables[0].Columns[1].ColumnName.ToString() == "INFO")
                    {
                        if (FileUpload1.HasFile == true)
                        {




                            camparamname = "arg_clientcode$arg_loc_code$arg_batchno$arg_sno$arg_user_code$arg_xmlvalue$arg_flag";
                            user_code = Session["usercode"].ToString();
                            client_code = Session["client_code"].ToString();
                            location_code = Session["location_code"].ToString();
                            camspcode = "CMS100";
                            paramcount = 7;
                            ws.Timeout = 9999999;
                            camparameter = client_code + "$" + "U1" + "$" + ddl_evsn_agm[0].ToString().Trim() + "$" + string.Empty + "$" + user_code + "$" + xmlval + "$2";
                            ds1 = ws.ExDataSetFirst_Large_blobs(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString(), P_Blob_image1, P_Blob_image2, P_Blob_image3, P_Blob_image4, P_Blob_image5, P_Blob_image6);
                            //ds = ws.ExDataSetFirst_Large_blobs(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString(), P_Blob_image1, P_Blob_image2, P_Blob_image3, P_Blob_image4, P_Blob_image5, P_Blob_image6);
                            ws.Dispose();

                            if (ds1.Tables.Count == 0)
                            {
                                ////////////////////////////////////////
                                ////////////////////////////////////////
                                btnClear_Click(sender, e);
                                lblMsg.Visible = true;
                                lblMsg.Text = "EVSN Updated Successfully. ID No : - " + ddl_evsn_agm[0].ToString().Trim();
                                return;
                            }
                            else
                            {
                                lblErrMsg.Visible = true;
                                lblErrMsg.Text = ds1.Tables[0].Rows[0][0].ToString();
                                return;

                            }
                        }

                        else
                        {
                            /////////////////////////////////////////////
                            camparamname = "ARG_CLIENT_CODE$ARG_COMPANY_CODE$ARG_LOT_CODE$ARG_BATCH_NO$ARG_BOOK_NO$ARG_SNO$ARG_LOCATION_CODE$ARG_DOC_TYPE$ARG_FROM_NO$ARG_TO_NO$ARG_LOT_RECEIPT_DATE$ARG_USER_CODE$ARG_FROM_YEAR$ARG_TO_YEAR$ARG_CAF_MONTH$ARG_CREATED_DATE$ARG_NAME$ARG_TO_MONTH$ARG_FLAG";
                            camparameter = Session["client_code"] + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + Session["usercode"].ToString() + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$44";
                            camspcode = "CMS10";
                            paramcount = 19;
                            ws.Timeout = 9999999;
                            ds = ws.ExDataSetFirst(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString());
                            ws.Dispose();

                            if (ds.Tables[0].Rows.Count > 0)//EV RTA .Rows[0][1].ToString() == "G199"
                            {

                                System.Net.Mail.MailMessage mail;
                                System.Net.Mail.SmtpClient mailClnt;
                                System.Text.StringBuilder body1 = new System.Text.StringBuilder();

                                body1.Append("<html><body> <div align=\"left\"> "
                              + "<table border=\"1\"><tr><td colspan=\"2\"><p align=\"center\">" + "Issuer Entry Details" + "</td></tr>"
                              + "<tr><td>" + "ISIN" + "</td>" + "<td>" + txt_isin.Text.Trim().ToUpper() + "</td></tr>"
                              + "<tr><td>" + "ISIN" + "</td>" + "<td>" + txt_isin_name.Text.Trim().ToUpper() + "</td></tr>"
                              + "<tr><td>" + "Type" + "</td>" + "<td>" + ddltype.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                              + "<tr><td>" + "EVSN Type" + "</td>" + "<td>" + drp_evsn_type.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                              + "<tr><td>" + "Total No of Shares" + "</td>" + "<td>" + txt_Tot_Nof_Shares.Text.Trim().ToUpper() + "</td></tr>"
                              + "<tr><td>" + "Nominal Value" + "</td>" + "<td>" + txt_nom_val.Text.Trim().ToUpper() + "</td></tr>"
                              + "<tr><td>" + "Voting Rights" + "</td>" + "<td>" + txt_vot_rights.Text.ToString().Trim().ToUpper() + "</td></tr>"
                              + "<tr><td>" + "Voting Rights Round OFF" + "</td>" + "<td>" + Drp_Vot_rghts_rndoff.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                              + "<tr><td>" + "Access Via Internet" + "</td>" + "<td>" + Drp_Access_Via_Internet.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                              + "<tr><td>" + "If Limited , Ip Address ( in commas ) :" + "</td>" + "<td>" + txt_Ltd_IPaddr.Text.ToString().Trim().ToUpper() + "</td></tr>"
                              + "<tr><td>" + "RTA Maker :" + "</td>" + "<td>" + ddl_Rta.SelectedItem.Text.ToString().Trim().ToUpper() + "</td></tr>"
                              + "<tr><td>" + "Scrutinzer :" + "</td>" + "<td>" + ddl_Scrutinizer.SelectedItem.Text.ToString().Trim().ToUpper() + "</td></tr>"
                              + "<tr><td>" + "RTA Confirmation Status" + "</td>" + "<td>" + Lbl_Rta_confm_status.Text.ToString().Trim().ToUpper() + "</td></tr>"
                              + "<tr><td>" + "Scrutinzer Access Days (<=30)" + "</td>" + "<td>" + Txt_Scrutinzer_Access.Text.ToString().Trim().ToUpper() + "</td></tr>"
                              + "<tr><td>" + "Allow Ballot Status" + "</td>" + "<td>" + ddl_All_Ball_Status.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                              + "<tr><td>" + "EVSN Approval Status" + "</td>" + "<td>" + ddl_Evsn_Appr_Status.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                              + "<tr><td>" + "Abstain Vote" + "</td>" + "<td>" + DropDownAbstain_vote.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                              + "<tr><td colspan=\"2\" align=\"center\">" + "Cameo Corporate Services Ltd </td></tr></table></p>"
                              + "<br/>" + "<br/> </div></body></html>");

                                mail = new System.Net.Mail.MailMessage();

                                //mailClnt = new System.Net.Mail.SmtpClient("192.168.1.203");
                                mailClnt = new System.Net.Mail.SmtpClient("mail.cameoindia.com");
                                mail.IsBodyHtml = true;
                                mailClnt.Credentials = new System.Net.NetworkCredential("ithelpdesk@cameoindia.com", "helpdesk");
                                string toId, mailsender, mailSubject, mailBody;
                                toId = ds.Tables[0].Rows[0][1].ToString();
                                mailsender = "cls@cameoindia.com";
                                mailSubject = "Evote Registration";
                                mailBody = ".";
                                mail.From = new System.Net.Mail.MailAddress(mailsender);
                                mail.To.Add(toId);
                                mail.Subject = mailSubject;
                                mail.Body = body1.ToString();
                                mailClnt.Send(mail);
                            }
                            /////////////////////////////////////////////
                            btnClear_Click(sender, e);
                            lblMsg.Visible = true;
                            lblMsg.Text = "EVSN Updated Successfully. ID No : - " + ddl_evsn_agm[0].ToString().Trim();
                            return;

                        }
                    }
                    else
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = ds.Tables[0].Rows[0][0].ToString();
                        return;

                    }
                }

                camparamname = "ARG_CLIENT_CODE$ARG_COMPANY_CODE$ARG_LOT_CODE$ARG_BATCH_NO$ARG_BOOK_NO$ARG_SNO$ARG_LOCATION_CODE$ARG_DOC_TYPE$ARG_FROM_NO$ARG_TO_NO$ARG_LOT_RECEIPT_DATE$ARG_USER_CODE$ARG_FROM_YEAR$ARG_TO_YEAR$ARG_CAF_MONTH$ARG_CREATED_DATE$ARG_NAME$ARG_TO_MONTH$ARG_FLAG";
                camparameter = Session["client_code"] + "$" + "" + "$" + "" + "$" + txt_isin.Text.Trim().ToUpper() + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + Session["usercode"].ToString() + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$46";
                camspcode = "CMS10";
                paramcount = 19;
                ws.Timeout = 9999999;
                ds = ws.ExDataSetFirst(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString());
                ws.Dispose();

                if (ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Columns[0].ColumnName.ToString() == "INFO")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = ds.Tables[0].Rows[0][0].ToString();
                    return;
                }

                camparamname = "arg_clientcode$arg_loc_code$arg_batchno$arg_sno$arg_user_code$arg_xmlvalue$arg_flag";
                user_code = Session["usercode"].ToString();
                client_code = Session["client_code"].ToString();
                location_code = Session["location_code"].ToString();
                camspcode = "CMS100";
                paramcount = 7;
                ws.Timeout = 9999999;
                camparameter = client_code + "$" + location_code + "$" + string.Empty + "$" + string.Empty + "$" + user_code + "$" + xmlval + "$1";
                ds = ws.ExDataSetFirst_blobs(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString(), P_Blob_image1, P_Blob_image2, P_Blob_image3, P_Blob_image4, P_Blob_image5, P_Blob_image6);
                //(string Sp_Name, string Paramname, string parameter, int count, byte[] blobImage)
                ws.Dispose();

                if (ds.Tables[0].Columns[0].ColumnName.ToString() == "AGM_ID")
                {
                    if (FileUpload1.HasFile == true)
                    {

                        camparamname = "arg_clientcode$arg_loc_code$arg_batchno$arg_sno$arg_user_code$arg_xmlvalue$arg_flag";
                        user_code = Session["usercode"].ToString();
                        client_code = Session["client_code"].ToString();
                        location_code = Session["location_code"].ToString();
                        camspcode = "CMS100";
                        paramcount = 7;
                        ws.Timeout = 9999999;
                        camparameter = client_code + "$" + "U1" + "$" + ds.Tables[0].Rows[0][0].ToString() + "$" + string.Empty + "$" + user_code + "$" + xmlval + "$2";
                        ds1 = ws.ExDataSetFirst_Large_blobs(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString(), P_Blob_image1, P_Blob_image2, P_Blob_image3, P_Blob_image4, P_Blob_image5, P_Blob_image6);
                        //ds = ws.ExDataSetFirst_Large_blobs(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString(), P_Blob_image1, P_Blob_image2, P_Blob_image3, P_Blob_image4, P_Blob_image5, P_Blob_image6);
                        ws.Dispose();

                        if (ds1.Tables.Count == 0)
                        {



                            camparamname = "ARG_CLIENT_CODE$ARG_COMPANY_CODE$ARG_LOT_CODE$ARG_BATCH_NO$ARG_BOOK_NO$ARG_SNO$ARG_LOCATION_CODE$ARG_DOC_TYPE$ARG_FROM_NO$ARG_TO_NO$ARG_LOT_RECEIPT_DATE$ARG_USER_CODE$ARG_FROM_YEAR$ARG_TO_YEAR$ARG_CAF_MONTH$ARG_CREATED_DATE$ARG_NAME$ARG_TO_MONTH$ARG_FLAG";
                            camparameter = Session["client_code"] + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + Session["usercode"].ToString() + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$44";
                            camspcode = "CMS10";
                            paramcount = 19;
                            ws.Timeout = 9999999;
                            ds = ws.ExDataSetFirst(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString());
                            ws.Dispose();

                            if (ds.Tables[0].Rows.Count > 0)//EV RTA .Rows[0][1].ToString() == "G199"
                            {

                                System.Net.Mail.MailMessage mail;
                                System.Net.Mail.SmtpClient mailClnt;
                                System.Text.StringBuilder body1 = new System.Text.StringBuilder();

                                body1.Append("<html><body> <div align=\"left\"> "
                              + "<table border=\"1\"><tr><td colspan=\"2\"><p align=\"center\">" + "Issuer Entry Details" + "</td></tr>"
                              + "<tr><td>" + "ISIN" + "</td>" + "<td>" + txt_isin.Text.Trim().ToUpper() + "</td></tr>"
                              + "<tr><td>" + "ISIN" + "</td>" + "<td>" + txt_isin_name.Text.Trim().ToUpper() + "</td></tr>"
                              + "<tr><td>" + "Type" + "</td>" + "<td>" + ddltype.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                              + "<tr><td>" + "EVSN Type" + "</td>" + "<td>" + drp_evsn_type.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                              + "<tr><td>" + "Total No of Shares" + "</td>" + "<td>" + txt_Tot_Nof_Shares.Text.Trim().ToUpper() + "</td></tr>"
                              + "<tr><td>" + "Nominal Value" + "</td>" + "<td>" + txt_nom_val.Text.Trim().ToUpper() + "</td></tr>"
                              + "<tr><td>" + "Voting Rights" + "</td>" + "<td>" + txt_vot_rights.Text.ToString().Trim().ToUpper() + "</td></tr>"
                              + "<tr><td>" + "Voting Rights Round OFF" + "</td>" + "<td>" + Drp_Vot_rghts_rndoff.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                              + "<tr><td>" + "Access Via Internet" + "</td>" + "<td>" + Drp_Access_Via_Internet.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                              + "<tr><td>" + "If Limited , Ip Address ( in commas ) :" + "</td>" + "<td>" + txt_Ltd_IPaddr.Text.ToString().Trim().ToUpper() + "</td></tr>"
                              + "<tr><td>" + "RTA Maker :" + "</td>" + "<td>" + ddl_Rta.SelectedItem.Text.ToString().Trim().ToUpper() + "</td></tr>"
                              + "<tr><td>" + "Scrutinzer :" + "</td>" + "<td>" + ddl_Scrutinizer.SelectedItem.Text.ToString().Trim().ToUpper() + "</td></tr>"
                              + "<tr><td>" + "RTA Confirmation Status" + "</td>" + "<td>" + Lbl_Rta_confm_status.Text.ToString().Trim().ToUpper() + "</td></tr>"
                              + "<tr><td>" + "Scrutinzer Access Days (<=30)" + "</td>" + "<td>" + Txt_Scrutinzer_Access.Text.ToString().Trim().ToUpper() + "</td></tr>"
                              + "<tr><td>" + "Allow Ballot Status" + "</td>" + "<td>" + ddl_All_Ball_Status.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                              + "<tr><td>" + "EVSN Approval Status" + "</td>" + "<td>" + ddl_Evsn_Appr_Status.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                              + "<tr><td>" + "Abstain Vote" + "</td>" + "<td>" + DropDownAbstain_vote.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                              + "<tr><td colspan=\"2\" align=\"center\">" + "Cameo Corporate Services Ltd </td></tr></table></p>"
                              + "<br/>" + "<br/> </div></body></html>");

                                mail = new System.Net.Mail.MailMessage();

                                //mailClnt = new System.Net.Mail.SmtpClient("192.168.1.203");
                                mailClnt = new System.Net.Mail.SmtpClient("mail.cameoindia.com");
                                mail.IsBodyHtml = true;
                                mailClnt.Credentials = new System.Net.NetworkCredential("ithelpdesk@cameoindia.com", "helpdesk");
                                string toId, mailsender, mailSubject, mailBody;
                                toId = ds.Tables[0].Rows[0][1].ToString();
                                mailsender = "cls@cameoindia.com";
                                mailSubject = "Evote Registration";
                                mailBody = ".";
                                mail.From = new System.Net.Mail.MailAddress(mailsender);
                                mail.To.Add(toId);
                                mail.Subject = mailSubject;
                                mail.Body = body1.ToString();
                                mailClnt.Send(mail);
                            }
                            btnClear_Click(sender, e);
                            lblMsg.Visible = true;
                            lblMsg.Text = "EVSN Created Successfully. ID No : - " + ds.Tables[0].Rows[0][0].ToString();
                            return;
                        }
                        else
                        {
                            lblErrMsg.Visible = true;
                            lblErrMsg.Text = ds1.Tables[0].Rows[0][0].ToString();
                            return;

                        }
                    }
                    else
                    {
                        btnClear_Click(sender, e);
                        lblMsg.Visible = true;
                        lblMsg.Text = "EVSN Created Successfully. ID No : - " + ds.Tables[0].Rows[0][0].ToString();
                        return;
                    }
                }
                else
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = ds.Tables[0].Rows[0][0].ToString();
                    return;
                }
            }

            if (Session["RTA"] == "G199")
            {
                if (ddl_isin_det.SelectedItem.Text.ToString() == "" || ddl_isin_det.SelectedItem.Text.ToString() == "Select")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Kindly Select ISIN Details";
                    ddl_isin_det.Focus();
                    return;
                }
                ddl_evsn_agm = ddl_isin_det.SelectedItem.Text.ToString().Trim().Split('-');


                camparamname = "arg_clientcode$arg_loc_code$arg_batchno$arg_sno$arg_user_code$arg_xmlvalue$arg_flag";
                user_code = Session["usercode"].ToString();
                client_code = Session["client_code"].ToString();
                location_code = Session["location_code"].ToString();
                camspcode = "CMS100";
                paramcount = 7;
                ws.Timeout = 9999999;
                camparameter = client_code + "$" + location_code + "$" + ddl_evsn_agm[0].ToString().Trim() + "$" + string.Empty + "$" + user_code + "$" + xmlval + "$2";
                ds = ws.ExDataSetFirst_blobs(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString(), new Byte[64], new Byte[64], P_Blob_image3, P_Blob_image4, P_Blob_image5, P_Blob_image6);
                ws.Dispose();
                if (ds.Tables[0].Columns[1].ColumnName.ToString() == "INFO")
                {
                    //FileRespath = Server.MapPath("../uploads/" + FileRes_Upload);// + Session["ID"]
                    //this.FileResUpload.SaveAs(FileRespath);
                    P_Blob_image1 = ReadFile(HRes_File.Value);

                    //Uplodpath = Server.MapPath("../uploads/" + Uploadphoto);// + Session["ID"]
                    //this.FileLogoUpload.SaveAs(Uplodpath);
                    P_Blob_image2 = ReadFile(HLogo_File.Value);

                    if (FileUpload1.HasFile == true)
                    {
                        Upload_Notice_File = Path.GetFileName(FileUpload1.FileName);
                        Upload_Notice_File_format = Path.GetFileNameWithoutExtension(FileUpload1.FileName);
                        Upload_Notice_File_size = Upload_Notice_File.Substring((Convert.ToInt32(Upload_Notice_File.Length) - 3), 3);

                        Upload_notice_path = Server.MapPath("../uploads/" + FileUpload1);// + Session["ID"]
                        this.FileResUpload.SaveAs(Upload_notice_path);
                        P_Blob_image3 = ReadFile(Upload_notice_path);

                    }

                    //string path1 = "";
                    //camparamname = "ARG_CLIENT_CODE$ARG_COMPANY_CODE$ARG_LOT_CODE$ARG_BATCH_NO$ARG_BOOK_NO$ARG_SNO$ARG_LOCATION_CODE$ARG_DOC_TYPE$ARG_FROM_NO$ARG_TO_NO$ARG_LOT_RECEIPT_DATE$ARG_USER_CODE$ARG_FROM_YEAR$ARG_TO_YEAR$ARG_CAF_MONTH$ARG_CREATED_DATE$ARG_NAME$ARG_TO_MONTH$ARG_FLAG";
                    //camparameter = Session["client_code"] + "$" + "" + "$" + "" + "$" + ddl_evsn_agm[0].ToString().Trim() + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + Session["usercode"].ToString() + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$17";
                    //camspcode = "CMS10";
                    //paramcount = 19;
                    //ws.Timeout = 9999999;
                    //ds = ws.ExDataSetFirst(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString());
                    //ws.Dispose();

                    //if (ds.Tables[0].Rows.Count > 0)
                    //{
                    //    path1 = ds.Tables[0].Rows[0][0].ToString();
                    //    Session["Path"] = ds.Tables[0].Rows[0][0].ToString();
                    //}
                    //else
                    //{
                    //    lblErrMsg.Visible = true;
                    //    lblErrMsg.Text = "Path Not Found";
                    //    ddl_isin_det.Focus();
                    //    return;
                    //}
                    //Rom_Filepath = Server.MapPath("../uploads/" + Rom_File);// + Session["ID"]



                    //this.Rom_File_Upload.SaveAs(Rom_Filepath);

                    //if (!Directory.Exists(path1 + @"\" + ddl_evsn_agm[0].ToString().Trim()))
                    //{
                    //    Directory.CreateDirectory(path1 + ddl_evsn_agm[0].ToString());
                    //}

                    //string rom_path_file = ddl_evsn_agm[0].ToString().Trim() + "_" + DateTime.Now.ToString("ddMMyyyyhhmm");
                    //if (File.Exists(path1 + ddl_evsn_agm[0].ToString().Trim() + @"\" + rom_path_file + "." + Rom_File_extn) == false)
                    //{
                    //    File.Move(Rom_Filepath, path1 + ddl_evsn_agm[0].ToString().Trim() + @"\" + rom_path_file + "." + Rom_File_extn);
                    //}


                    //P_Blob_image3 = ReadFile(Rom_Filepath);


                    camparamname = "arg_clientcode$arg_loc_code$arg_batchno$arg_sno$arg_user_code$arg_xmlvalue$arg_flag";
                    user_code = Session["usercode"].ToString();
                    client_code = Session["client_code"].ToString();
                    location_code = Session["location_code"].ToString();
                    camspcode = "CMS100";
                    paramcount = 7;
                    ws.Timeout = 9999999;
                    camparameter = client_code + "$" + "U" + "$" + ddl_evsn_agm[0].ToString().Trim() + "$" + string.Empty + "$" + user_code + "$" + xmlval + "$2";
                    ds = ws.ExDataSetFirst_Large_blobs(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString(), P_Blob_image1, P_Blob_image2, P_Blob_image3, P_Blob_image4, P_Blob_image5, P_Blob_image6);
                    //ds = ws.ExDataSetFirst_Large_blobs(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString(), P_Blob_image1, P_Blob_image2, P_Blob_image3, P_Blob_image4, P_Blob_image5, P_Blob_image6);
                    ws.Dispose();
                    if (ds.Tables.Count == 0)
                    {
                        if (FileUpload1.HasFile == true)
                        {
                            Upload_notice_path = Server.MapPath("../uploads/" + Upload_Notice_File);// + Session["ID"]
                            this.FileUpload1.SaveAs(Upload_notice_path);
                            P_Blob_image4 = ReadFile(Upload_notice_path);

                            camparamname = "arg_clientcode$arg_loc_code$arg_batchno$arg_sno$arg_user_code$arg_xmlvalue$arg_flag";
                            user_code = Session["usercode"].ToString();
                            client_code = Session["client_code"].ToString();
                            location_code = Session["location_code"].ToString();
                            camspcode = "CMS100";
                            paramcount = 7;
                            ws.Timeout = 9999999;
                            camparameter = client_code + "$" + "U1" + "$" + ddl_evsn_agm[0].ToString().Trim() + "$" + string.Empty + "$" + user_code + "$" + xmlval + "$2";
                            ds = ws.ExDataSetFirst_Large_blobs(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString(), P_Blob_image1, P_Blob_image2, P_Blob_image3, P_Blob_image4, P_Blob_image5, P_Blob_image6);
                            //ds = ws.ExDataSetFirst_Large_blobs(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString(), P_Blob_image1, P_Blob_image2, P_Blob_image3, P_Blob_image4, P_Blob_image5, P_Blob_image6);
                            ws.Dispose();

                            if (ds.Tables.Count == 0)
                            {

                                lblMsg.Visible = true;
                                lblMsg.Text = "EVSN Updated Successfully. ID No : - " + ddl_evsn_agm[0].ToString().Trim();
                                //return;
                            }
                            else
                            {
                                lblErrMsg.Visible = true;
                                lblErrMsg.Text = ds.Tables[0].Rows[0][0].ToString();
                                return;

                            }
                        }

                        lblMsg.Visible = true;
                        lblMsg.Text = "EVSN Updated Successfully. ID No : - " + ddl_evsn_agm[0].ToString().Trim();
                        // return;
                    }
                    else
                    {
                        lblMsg.Visible = true;
                        lblMsg.Text = ds.Tables[0].Rows[0][0].ToString();
                        return;
                    }
                }
                else
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = ds.Tables[0].Rows[0][0].ToString();
                    return;
                }

                //}

                //if (Session["EVRTA"] == "G200")
                //{
                dt = (DataTable)ViewState["row"];

                foreach (DataRow row in dt.Rows)
                {
                    if (row[2].ToString() != "")
                    {
                        P_Blob_image1 = ReadFile(row[2].ToString());
                    }
                    else
                    {
                        P_Blob_image1 = new Byte[64];
                    }

                    if (row[3].ToString() != "")
                    {

                        P_Blob_image2 = ReadFile(row[3].ToString());
                    }
                    else
                    {
                        P_Blob_image2 = new Byte[64];
                    }
                    P_Blob_image3 = null;
                    P_Blob_image4 = null;
                    P_Blob_image5 = null;
                    P_Blob_image6 = null;

                    ddl_evsn_agm = ddl_isin_det.SelectedItem.Text.ToString().Trim().Split('-');

                    camparamname = "ARG_CLIENT_CODE$ARG_COMPANY_CODE$ARG_LOT_CODE$ARG_BATCH_NO$ARG_BOOK_NO$ARG_SNO$ARG_LOCATION_CODE$ARG_DOC_TYPE$ARG_FROM_NO$ARG_TO_NO$ARG_LOT_RECEIPT_DATE$ARG_USER_CODE$ARG_FROM_YEAR$ARG_TO_YEAR$ARG_CAF_MONTH$ARG_CREATED_DATE$ARG_NAME$ARG_TO_MONTH$ARG_FLAG";
                    camparameter = Session["client_code"] + "$" + "" + "$" + string.Empty + "$" + ddl_evsn_agm[0].ToString().Trim() + "$" + row[6].ToString() + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + Session["usercode"].ToString() + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$21";
                    camspcode = "CMS10";
                    paramcount = 19;
                    ws.Timeout = 9999999;
                    ds = ws.ExDataSetFirst(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString());//Resolution Update Case

                    if (ds.Tables[0].Columns[0].ColumnName.ToString() == "CNT" && Convert.ToInt32(ds.Tables[0].Rows[0][0]) != 0)
                    {

                        xmlval = string.Empty;
                        xmlval = "<ROWSET>";
                        xmlval = xmlval + "<ROW num= " + (Char)34 + "0" + (Char)34 + " >";
                        for (int i = 1; i <= 10; i++)
                        {
                            if (i == 1)
                            {
                                xmlval = xmlval + "<F" + (funval + i) + ">" + row[1].ToString().ToUpper() + "</F" + (funval + i) + ">";
                            }
                            if (i == 2)
                            {
                                if (row[4].ToString() != "")
                                {
                                    xmlval = xmlval + "<F" + (funval + i) + ">" + Path.GetFileNameWithoutExtension(row[4].ToString()) + "</F" + (funval + i) + ">";
                                }
                                else
                                {
                                    xmlval = xmlval + "<F" + (funval + i) + ">" + string.Empty + "</F" + (funval + i) + ">";
                                }
                            }

                            if (i == 3)
                            {
                                if (row[4].ToString() != "")
                                {
                                    xmlval = xmlval + "<F" + (funval + i) + ">" + row[4].ToString().Substring((Convert.ToInt32(row[4].ToString().Length) - 3), 3) + "</F" + (funval + i) + ">";
                                }
                                else
                                {
                                    xmlval = xmlval + "<F" + (funval + i) + ">" + string.Empty + "</F" + (funval + i) + ">";
                                }
                            }
                            if (i == 4)
                            {
                                xmlval = xmlval + "<F" + (funval + i) + ">" + P_Blob_image1.Length + "</F" + (funval + i) + ">";
                            }

                            if (i == 5)
                            {
                                if (row[5].ToString() != "")
                                {
                                    xmlval = xmlval + "<F" + (funval + i) + ">" + Path.GetFileNameWithoutExtension(row[5].ToString()) + "</F" + (funval + i) + ">";
                                }
                                else
                                {
                                    xmlval = xmlval + "<F" + (funval + i) + ">" + string.Empty + "</F" + (funval + i) + ">";
                                }
                            }

                            if (i == 6)
                            {
                                if (row[5].ToString() != "")
                                {
                                    xmlval = xmlval + "<F" + (funval + i) + ">" + row[5].ToString().Substring((Convert.ToInt32(row[5].ToString().Length) - 3), 3) + "</F" + (funval + i) + ">";
                                }
                                else
                                {
                                    xmlval = xmlval + "<F" + (funval + i) + ">" + string.Empty + "</F" + (funval + i) + ">";
                                }
                            }
                            if (i == 7)
                            {
                                xmlval = xmlval + "<F" + (funval + i) + ">" + P_Blob_image2.Length + "</F" + (funval + i) + ">";
                            }

                            if (i == 8)
                            {
                                xmlval = xmlval + "<F" + (funval + i) + ">" + row[6].ToString() + "</F" + (funval + i) + ">";
                            }
                            if (i == 9)
                            {
                                xmlval = xmlval + "<F" + (funval + i) + ">" + Txt_No_of_Res.Text.Trim() + "</F" + (funval + i) + ">";
                            }
                            if (i == 10)
                            {
                                xmlval = xmlval + "<F" + (funval + i) + ">" + row[0].ToString().ToUpper() + "</F" + (funval + i) + ">";
                            }

                        }

                        xmlval = xmlval + "</ROW>";
                        xmlval = xmlval + "</ROWSET>";
                        xmlval = xmlval.Replace("&nbsp;", "");
                        xmlval = xmlval.Replace("&NBSP;", "");

                        camparamname = "arg_clientcode$arg_loc_code$arg_batchno$arg_sno$arg_user_code$arg_xmlvalue$arg_flag";
                        user_code = Session["usercode"].ToString();
                        client_code = Session["client_code"].ToString();
                        location_code = Session["location_code"].ToString();
                        camspcode = "CMS100";
                        paramcount = 7;
                        ws.Timeout = 9999999;
                        //ds.Clear();
                        camparameter = client_code + "$" + "U2" + "$" + ddl_evsn_agm[0].ToString().Trim() + "$" + string.Empty + "$" + user_code + "$" + xmlval + "$10";
                        ds1 = ws.ExDataSetFirst_Large_blobs(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString(), P_Blob_image1, P_Blob_image2, P_Blob_image3, P_Blob_image4, P_Blob_image5, P_Blob_image6);
                        ws.Dispose();

                        if (ds1.Tables.Count == 0)
                        {
                            //btnClear_Click(sender, e);
                            lblMsg.Visible = true;
                            lblMsg.Text = "EVSN Updated Successfully. ID No : - " + ddl_evsn_agm[0].ToString().Trim();
                            //return;
                        }
                        else
                        {
                            lblErrMsg.Visible = true;
                            lblErrMsg.Text = ds1.Tables[0].Rows[0][0].ToString();
                            return;
                        }
                    }

                    else
                    {
                        camparamname = "ARG_CLIENT_CODE$ARG_COMPANY_CODE$ARG_LOT_CODE$ARG_BATCH_NO$ARG_BOOK_NO$ARG_SNO$ARG_LOCATION_CODE$ARG_DOC_TYPE$ARG_FROM_NO$ARG_TO_NO$ARG_LOT_RECEIPT_DATE$ARG_USER_CODE$ARG_FROM_YEAR$ARG_TO_YEAR$ARG_CAF_MONTH$ARG_CREATED_DATE$ARG_NAME$ARG_TO_MONTH$ARG_FLAG";
                        camparameter = Session["client_code"] + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + Session["usercode"].ToString() + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$16";
                        camspcode = "CMS10";
                        paramcount = 19;
                        ws.Timeout = 9999999;
                        ds = ws.ExDataSetFirst(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString()); //Resolution Insert Case

                        if (ds.Tables[0].Columns[0].ColumnName.ToString() == "V_RES_ID")//ds.Tables[0].Rows[0][0].ToString()
                        {
                            string res_id = ds.Tables[0].Rows[0][0].ToString();

                            xmlval = string.Empty;
                            xmlval = "<ROWSET>";
                            xmlval = xmlval + "<ROW num= " + (Char)34 + "0" + (Char)34 + " >";
                            for (int i = 1; i <= 10; i++)
                            {
                                if (i == 1)
                                {
                                    xmlval = xmlval + "<F" + (funval + i) + ">" + row[1].ToString().ToUpper() + "</F" + (funval + i) + ">";
                                }
                                if (i == 2)
                                {
                                    if (row[4].ToString() != "")
                                    {
                                        xmlval = xmlval + "<F" + (funval + i) + ">" + Path.GetFileNameWithoutExtension(row[4].ToString()) + "</F" + (funval + i) + ">";
                                    }
                                    else
                                    {
                                        xmlval = xmlval + "<F" + (funval + i) + ">" + string.Empty + "</F" + (funval + i) + ">";
                                    }
                                }

                                if (i == 3)
                                {
                                    if (row[4].ToString() != "")
                                    {
                                        xmlval = xmlval + "<F" + (funval + i) + ">" + row[4].ToString().Substring((Convert.ToInt32(row[4].ToString().Length) - 3), 3) + "</F" + (funval + i) + ">";
                                    }
                                    else
                                    {
                                        xmlval = xmlval + "<F" + (funval + i) + ">" + string.Empty + "</F" + (funval + i) + ">";
                                    }
                                }
                                if (i == 4)
                                {
                                    xmlval = xmlval + "<F" + (funval + i) + ">" + P_Blob_image1.Length + "</F" + (funval + i) + ">";
                                }

                                if (i == 5)
                                {
                                    if (row[5].ToString() != "")
                                    {
                                        xmlval = xmlval + "<F" + (funval + i) + ">" + Path.GetFileNameWithoutExtension(row[5].ToString()) + "</F" + (funval + i) + ">";
                                    }
                                    else
                                    {
                                        xmlval = xmlval + "<F" + (funval + i) + ">" + string.Empty + "</F" + (funval + i) + ">";
                                    }
                                }

                                if (i == 6)
                                {
                                    if (row[5].ToString() != "")
                                    {
                                        xmlval = xmlval + "<F" + (funval + i) + ">" + row[5].ToString().Substring((Convert.ToInt32(row[5].ToString().Length) - 3), 3) + "</F" + (funval + i) + ">";
                                    }
                                    else
                                    {
                                        xmlval = xmlval + "<F" + (funval + i) + ">" + string.Empty + "</F" + (funval + i) + ">";
                                    }
                                }
                                if (i == 7)
                                {
                                    xmlval = xmlval + "<F" + (funval + i) + ">" + P_Blob_image2.Length + "</F" + (funval + i) + ">";
                                }

                                if (i == 8)
                                {
                                    xmlval = xmlval + "<F" + (funval + i) + ">" + res_id + "</F" + (funval + i) + ">";
                                }
                                if (i == 9)
                                {
                                    xmlval = xmlval + "<F" + (funval + i) + ">" + Txt_No_of_Res.Text.Trim() + "</F" + (funval + i) + ">";
                                }
                                if (i == 10)
                                {
                                    xmlval = xmlval + "<F" + (funval + i) + ">" + row[0].ToString().ToUpper() + "</F" + (funval + i) + ">";
                                }

                            }

                            xmlval = xmlval + "</ROW>";
                            xmlval = xmlval + "</ROWSET>";
                            xmlval = xmlval.Replace("&nbsp;", "");
                            xmlval = xmlval.Replace("&NBSP;", "");

                            //ddl_evsn_agm = ddl_isin_det.SelectedItem.Text.ToString().Trim().Split('-');


                            //  else
                            // {
                            camparamname = "arg_clientcode$arg_loc_code$arg_batchno$arg_sno$arg_user_code$arg_xmlvalue$arg_flag";
                            user_code = Session["usercode"].ToString();
                            client_code = Session["client_code"].ToString();
                            location_code = Session["location_code"].ToString();
                            camspcode = "CMS100";
                            paramcount = 7;
                            ws.Timeout = 9999999;
                            ds.Clear();
                            camparameter = client_code + "$" + "I" + "$" + ddl_evsn_agm[0].ToString().Trim() + "$" + string.Empty + "$" + user_code + "$" + xmlval + "$2";
                            ds1 = ws.ExDataSetFirst_Large_blobs(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString(), P_Blob_image1, P_Blob_image2, P_Blob_image3, P_Blob_image4, P_Blob_image5, P_Blob_image6);
                            ws.Dispose();

                            if (ds1.Tables.Count == 0)
                            {
                                //btnClear_Click(sender, e);
                                lblMsg.Visible = true;
                                lblMsg.Text = "EVSN Updated Successfully. ID No :  " + ddl_evsn_agm[0].ToString().Trim();


                            }
                            else
                            {
                                lblErrMsg.Visible = true;
                                lblErrMsg.Text = ds.Tables[0].Rows[0][0].ToString();
                                break;
                            }
                            // }

                        }
                        else
                        {
                            lblErrMsg.Visible = true;
                            lblErrMsg.Text = "No Records Found";
                            return;
                        }

                    }

                    //}

                    //else
                    //{
                    //    lblErrMsg.Visible = true;
                    //    lblErrMsg.Text = ds1.Tables[0].Rows[0][0].ToString();
                    //    return;
                    //}

                }

                byte[] temp = new Byte[1];
                camparamname = "arg_clientcode$arg_loc_code$arg_batchno$arg_sno$arg_user_code$arg_xmlvalue$arg_flag";
                camspcode = "CMS100";
                paramcount = 7;
                ws.Timeout = 9999999;
                camparameter = "342" + "$" + "" + "$" + "" + "$" + string.Empty + "$" + Convert.ToString(HttpContext.Current.Session["usercode"]) + "$" + "" + "$16";
                ds = ws.ExDataSetFirst_blobs(camspcode, camProjectName, camparamname, camparameter, paramcount, "342", temp, temp, temp, temp, temp, temp);
                ws.Dispose();
                if (ds.Tables[0].Rows.Count != 0 && ds.Tables[0].Columns[0].ColumnName.ToUpper() == "REG_EMAIL_ID")
                {
                   

                    System.Net.Mail.MailMessage mail;
                    System.Net.Mail.SmtpClient mailClnt;
                    System.Text.StringBuilder body1 = new System.Text.StringBuilder();
                    System.Text.StringBuilder body2 = new System.Text.StringBuilder();

                    body1.Append("<html><body> <div align=\"left\"> "
                  + "<table border=\"1\"><tr><td colspan=\"2\"><p align=\"center\">" + "RTA Maker Details" + "</td></tr>"
                  + "<tr><td>" + "ISIN" + "</td>" + "<td>" + txt_isin.Text.Trim().ToUpper() + "</td></tr>"
                  + "<tr><td>" + "ISIN" + "</td>" + "<td>" + txt_isin_name.Text.Trim().ToUpper() + "</td></tr>"
                  + "<tr><td>" + "Type" + "</td>" + "<td>" + ddltype.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                  + "<tr><td>" + "EVSN Type" + "</td>" + "<td>" + Txt_Vot_Start_Time.Text.Trim() + "</td></tr>"
                  + "<tr><td>" + "Total No of Shares" + "</td>" + "<td>" + Txt_Vot_End_Time.Text.Trim() + "</td></tr>"
                  + "<tr><td>" + "Nominal Value" + "</td>" + "<td>" + Txt_Meet_Start_Date_Time.Text.Trim() + "</td></tr>"
                  + "<tr><td>" + "Access Via Internet" + "</td>" + "<td>" + txt_hold_date.Text.ToString().Trim() + "</td></tr>"
                   + "<tr><td colspan=\"2\" align=\"center\">" + "Cameo Corporate Services Ltd </td></tr></table></p>"
                  + "<br/>" + "<br/> </div></body></html>");

                    body2.Append("<html><body> <div align=\"left\"> " +
                          "<table border=\"1\"><tr><td colspan=\"2\"><p align=\"center\">" + "Resolution Details" + "</td></tr>"
                    + "<tr><td>" + "Number Of Resolution" + "</td>" + "<td>" + GridView1.Rows.Count + "</td></tr>");
                    if (GridView1.Rows.Count > 0)
                    {
                        for (int k = 0; k < GridView1.Rows.Count; k++)
                        {
                            body2.Append("<tr><td>" + "Sno" + "</td>" + "<td>" + GridView1.Rows[k].Cells[0].Text + "</td></tr>");
                            body2.Append("<tr><td>" + "Resolution Desc" + "</td>" + "<td>" + GridView1.Rows[k].Cells[1].Text + "</td></tr>");
                        }
                    }

                    body2.Append("<tr><td colspan=\"2\" align=\"center\">" + "Cameo Corporate Services Ltd </td></tr></table></p>"
                    + "<br/>" + "<br/> </div></body></html>");

                    mail = new System.Net.Mail.MailMessage();

                    //mailClnt = new System.Net.Mail.SmtpClient("192.168.1.203");
                    mailClnt = new System.Net.Mail.SmtpClient("mail.cameoindia.com");
                    mail.IsBodyHtml = true;
                    mailClnt.Credentials = new System.Net.NetworkCredential("ithelpdesk@cameoindia.com", "helpdesk");
                    string toId, mailsender, mailSubject, mailBody;
                    toId = ds.Tables[0].Rows[0][0].ToString();
                    mailsender = "cls@cameoindia.com";
                    mailSubject = "Rta Maker Entry Details";
                    mailBody = ".";
                    mail.From = new System.Net.Mail.MailAddress(mailsender);
                    mail.To.Add(toId);
                    mail.Subject = mailSubject;
                    mail.Body = body1.ToString() + body2.ToString();
                    mailClnt.Send(mail);

                   /* System.Net.Mail.MailMessage mail;
                    System.Net.Mail.SmtpClient mailClnt;
                    System.Text.StringBuilder body1 = new System.Text.StringBuilder();

                    body1.Append("<html><body> <div align=\"left\"> "
                  + "<table border=\"1\"><tr><td colspan=\"2\"><p align=\"center\">" + "RTA Maker Details" + "</td></tr>"
                  + "<tr><td>" + "ISIN" + "</td>" + "<td>" + txt_isin.Text.Trim().ToUpper() + "</td></tr>"
                  + "<tr><td>" + "ISIN" + "</td>" + "<td>" + txt_isin_name.Text.Trim().ToUpper() + "</td></tr>"
                  + "<tr><td>" + "Type" + "</td>" + "<td>" + ddltype.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                  + "<tr><td>" + "Voting Start Date and Time" + "</td>" + "<td>" + Txt_Vot_Start_Time.Text.ToString().Trim() + "</td></tr>"
                  + "<tr><td>" + "Voting End Date" + "</td>" + "<td>" + Txt_Vot_End_Time.Text.Trim() + "</td></tr>"
                  + "<tr><td>" + "Meeting Start Date and Time" + "</td>" + "<td>" + Txt_Meet_Start_Date_Time.Text.Trim() + "</td></tr>"
                  + "<tr><td>" + "Holding Date ( Cut Off Date ) #" + "</td>" + "<td>" + txt_hold_date.Text.ToString().Trim() + "</td></tr>"
                  + "<tr><td>" + "Number Of Resolution" + "<td>" + GridView1.Rows.Count + "</td></tr>"              
                  + "<tr><td colspan=\"2\" align=\"center\">" + "Cameo Corporate Services Ltd </td></tr></table></p>"
                  + "<br/>" + "<br/> </div></body></html>");

                    mail = new System.Net.Mail.MailMessage();

                    //mailClnt = new System.Net.Mail.SmtpClient("192.168.1.203");
                    mailClnt = new System.Net.Mail.SmtpClient("mail.cameoindia.com");
                    mail.IsBodyHtml = true;
                    mailClnt.Credentials = new System.Net.NetworkCredential("ithelpdesk@cameoindia.com", "helpdesk");
                    string toId, mailsender, mailSubject, mailBody;
                    toId = ds.Tables[0].Rows[0][0].ToString();
                    mailsender = "cls@cameoindia.com";
                    mailSubject = "RTA Maker Details";
                    mailBody = ".";
                    mail.From = new System.Net.Mail.MailAddress(mailsender);
                    mail.To.Add(toId);
                    mail.Subject = mailSubject;
                    mail.Body = body1.ToString();
                    mailClnt.Send(mail);*/

                }
          

               

                btnClear_Click(sender, e);
                lblMsg.Visible = true;
                lblMsg.Text = "EVSN Updated Successfully. ID No :  " + ddl_evsn_agm[0].ToString().Trim();



                GridView1.DataSource = null;
                GridView1.DataBind();
            }
            if (Session["EVRTA"] == "G200")
            {
                string sCaptchaText = Session["TxtCaptchaCode"].ToString();
                if (ddl_isin_det.SelectedItem.Text.ToString() == "" || ddl_isin_det.SelectedItem.Text.ToString() == "Select")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Kindly Select ISIN Details";
                    ddl_isin_det.Focus();
                    return;
                }

                if (ddl_Disp_All_Infrm.SelectedItem.Text == "--Select--")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Kindly Choose for Scrutinizer Approval ";
                    ddl_Disp_All_Infrm.Focus();
                    return;
                }
                if (txtCaptcha.Text.ToString().Trim() == "")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Kindly Enter the Captcha Number ";
                    txtCaptcha.Focus();
                    return;
                }
                if (sCaptchaText != txtCaptcha.Text.Trim())
                {
                    this.lblErrMsg.Visible = true;
                    this.lblErrMsg.Text = "Kindly Enter the correct Captcha";
                    txtCaptcha.Text = "";
                    txtCaptcha.Focus();
                    return;
                }


                if (ddl_Disp_All_Infrm.SelectedItem.Text == "No")
                {
                    remarks.Visible = true;
                    remark1.Visible = true;
                    if (txtremark.Text.Trim() == "")
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Kindly Enter the Remarks ";
                        txtremark.Focus();
                        return;
                    }
                }



                ddl_evsn_agm = ddl_isin_det.SelectedItem.Text.ToString().Trim().Split('-');

                camparamname = "ARG_CLIENT_CODE$ARG_COMPANY_CODE$ARG_LOT_CODE$ARG_BATCH_NO$ARG_BOOK_NO$ARG_SNO$ARG_LOCATION_CODE$ARG_DOC_TYPE$ARG_FROM_NO$ARG_TO_NO$ARG_LOT_RECEIPT_DATE$ARG_USER_CODE$ARG_FROM_YEAR$ARG_TO_YEAR$ARG_CAF_MONTH$ARG_CREATED_DATE$ARG_NAME$ARG_TO_MONTH$ARG_FLAG";
                camparameter = Session["client_code"] + "$" + "" + "$" + ddl_Disp_All_Infrm.Text.ToString().Substring(0, 1).ToUpper() + "$" + ddl_evsn_agm[0].ToString().Trim() + "$" + "" + "$" + "" + "$" + "" + "$" + txtremark.Text.Trim() + "$" + "" + "$" + "" + "$" + "" + "$" + Session["usercode"].ToString() + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$18";
                camspcode = "CMS10";
                paramcount = 19;
                ws.Timeout = 9999999;
                ds = ws.ExDataSetFirst(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString());
                ws.Dispose();

                if (ds.Tables[0].Columns[0].ColumnName.ToString() == "INFO")//ds.Tables[0].Rows[0][0].ToString()
                {
                    btnClear_Click(sender, e);
                    lblMsg.Visible = true;
                    lblMsg.Text = "EVSN " + ds.Tables[0].Rows[0][0].ToString() + ". ID No :  " + ddl_evsn_agm[0].ToString().Trim(); ;
                    isin_details();
                    txtremark.Text = "";

                    ddl_isin_det.Focus();

                    byte[] temp = new Byte[1];
                camparamname = "arg_clientcode$arg_loc_code$arg_batchno$arg_sno$arg_user_code$arg_xmlvalue$arg_flag";
                camspcode = "CMS100";
                paramcount = 7;
                ws.Timeout = 9999999;
                camparameter = "342" + "$" + "" + "$" + "" + "$" + string.Empty + "$" + Convert.ToString(HttpContext.Current.Session["usercode"]) + "$" + "" + "$16";
                ds = ws.ExDataSetFirst_blobs(camspcode, camProjectName, camparamname, camparameter, paramcount, "342", temp, temp, temp, temp, temp, temp);
                ws.Dispose();
                if (ds.Tables[0].Rows.Count != 0 && ds.Tables[0].Columns[0].ColumnName.ToUpper() == "REG_EMAIL_ID")
                {
                    System.Net.Mail.MailMessage mail;
                    System.Net.Mail.SmtpClient mailClnt;
                    System.Text.StringBuilder body1 = new System.Text.StringBuilder();

                    body1.Append("<html><body> <div align=\"left\"> "
                  + "<table border=\"1\"><tr><td colspan=\"2\"><p align=\"center\">" + "RTA Checker Approval Details" + "</td></tr>"
                  + "<tr><td>" + "ISIN" + "</td>" + "<td>" + txt_isin.Text.Trim().ToUpper() + "</td></tr>"
                  + "<tr><td>" + "ISIN" + "</td>" + "<td>" + txt_isin_name.Text.Trim().ToUpper() + "</td></tr>"
                 //+ "<tr><td>" + "Type" + "</td>" + "<td>" + ddltype.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                  //+ "<tr><td>" + "EVSN Type" + "</td>" + "<td>" + drp_evsn_type.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                  //+ "<tr><td>" + "Total No of Shares" + "</td>" + "<td>" + txt_Tot_Nof_Shares.Text.Trim().ToUpper() + "</td></tr>"
                  //+ "<tr><td>" + "Nominal Value" + "</td>" + "<td>" + txt_nom_val.Text.Trim().ToUpper() + "</td></tr>"
                  //+ "<tr><td>" + "Voting Rights" + "</td>" + "<td>" + txt_vot_rights.Text.ToString().Trim().ToUpper() + "</td></tr>"
                  //+ "<tr><td>" + "Voting Rights Round OFF" + "</td>" + "<td>" + Drp_Vot_rghts_rndoff.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                  //+ "<tr><td>" + "Access Via Internet" + "</td>" + "<td>" + Drp_Access_Via_Internet.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                  //+ "<tr><td>" + "If Limited , Ip Address ( in commas ) :" + "</td>" + "<td>" + txt_Ltd_IPaddr.Text.ToString().Trim().ToUpper() + "</td></tr>"
                  //+ "<tr><td>" + "RTA Maker :" + "</td>" + "<td>" + ddl_Rta.SelectedItem.Text.ToString().Trim().ToUpper() + "</td></tr>"
                  //+ "<tr><td>" + "Scrutinzer :" + "</td>" + "<td>" + ddl_Scrutinizer.SelectedItem.Text.ToString().Trim().ToUpper() + "</td></tr>"
                  //+ "<tr><td>" + "RTA Confirmation Status" + "</td>" + "<td>" + Lbl_Rta_confm_status.Text.ToString().Trim().ToUpper() + "</td></tr>"
                  //+ "<tr><td>" + "Scrutinzer Access Days (<=30)" + "</td>" + "<td>" + Txt_Scrutinzer_Access.Text.ToString().Trim().ToUpper() + "</td></tr>"
                  //+ "<tr><td>" + "Allow Ballot Status" + "</td>" + "<td>" + ddl_All_Ball_Status.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                  //+ "<tr><td>" + "EVSN Approval Status" + "</td>" + "<td>" + ddl_Evsn_Appr_Status.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                  //+ "<tr><td>" + "Abstain Vote" + "</td>" + "<td>" + DropDownAbstain_vote.SelectedItem.Text.ToString().Trim() + "</td></tr>"
                  + "<tr><td>" + "RTA Checker Approval" + "</td>" + "<td>" + ddl_Disp_All_Infrm.Text.ToString() + "</td></tr>"
                  + "<tr><td colspan=\"2\" align=\"center\">" + "Cameo Corporate Services Ltd </td></tr></table></p>"
                  + "<br/>" + "<br/> </div></body></html>");

                    mail = new System.Net.Mail.MailMessage();

                    //mailClnt = new System.Net.Mail.SmtpClient("192.168.1.203");
                    mailClnt = new System.Net.Mail.SmtpClient("mail.cameoindia.com");
                    mail.IsBodyHtml = true;
                    mailClnt.Credentials = new System.Net.NetworkCredential("ithelpdesk@cameoindia.com", "helpdesk");
                    string toId, mailsender, mailSubject, mailBody;
                    toId = ds.Tables[0].Rows[0][1].ToString();
                    mailsender = "cls@cameoindia.com";
                    mailSubject = "Evote Registration";
                    mailBody = ".";
                    mail.From = new System.Net.Mail.MailAddress(mailsender);
                    mail.To.Add(toId);
                    mail.Subject = mailSubject;
                    mail.Body = body1.ToString();
                    mailClnt.Send(mail);
                }

                    return;
                }

                else if (ds.Tables[0].Columns[0].ColumnName.ToString() == "WARNING")
                {
                    if (ddl_Disp_All_Infrm.SelectedItem.Text == "Yes")
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Rom Upload Not Tallied / Not Loaded. Kindly choose option No.";
                        ddl_Disp_All_Infrm.Focus();
                        return;
                    }
                    //System.Windows.Forms.DialogResult result;
                    //Form form ;
                    //using (form = new Form())
                    //{
                    //    form.Size = new System.Drawing.Size(1, 1);
                    //    form.StartPosition = FormStartPosition.CenterScreen;
                    //    System.Drawing.Rectangle rect = SystemInformation.WorkingArea;
                    //    form.Location = new System.Drawing.Point(rect.Bottom + 10, rect.Right + 10);
                    //    form.TopMost = true;
                    //    form.ShowDialog();
                    //    form.Focus();
                    //    form.BringToFront();
                    //    form.Activate();
                    //    result = System.Windows.Forms.MessageBox.Show(form,"Rom Upload Not Tallied / Not Loaded.", "RTA Checker Approval Entry", System.Windows.Forms.MessageBoxButtons.YesNo);
                    //}
                    //ClientScript.RegisterStartupScript(btnSubmit.GetType(), "myconfirm", "confirm('Rom Upload Not Tallied / Not Loaded.');", true);

                    //ScriptManager.RegisterClientScriptBlock(btnSubmit, GetType(), "myScript", "alert('Rom Upload Not Tallied / Not Loaded.');", true);

                    //  System.Windows.Forms.DialogResult result = System.Windows.Forms.MessageBox.Show("Rom Upload Not Tallied / Not Loaded.", "RTA Checker Approval Entry", System.Windows.Forms.MessageBoxButtons.YesNo);


                   // Response.Write(@"<script language='javascript'>confirm('Rom Upload Not Tallied / Not Loaded.')</script>");

                    //string result = "<script type = 'text/javascript'>confirm('Rom Upload Not Tallied / Not Loaded.');</script>";


                     // if (result == "OK")
                     // {
                    
                          camparamname = "ARG_CLIENT_CODE$ARG_COMPANY_CODE$ARG_LOT_CODE$ARG_BATCH_NO$ARG_BOOK_NO$ARG_SNO$ARG_LOCATION_CODE$ARG_DOC_TYPE$ARG_FROM_NO$ARG_TO_NO$ARG_LOT_RECEIPT_DATE$ARG_USER_CODE$ARG_FROM_YEAR$ARG_TO_YEAR$ARG_CAF_MONTH$ARG_CREATED_DATE$ARG_NAME$ARG_TO_MONTH$ARG_FLAG";
                          camparameter = Session["client_code"] + "$" + "" + "$" + "No" + "$" + ddl_evsn_agm[0].ToString().Trim() + "$" + "" + "$" + "" + "$" + "" + "$" + txtremark.Text.Trim() + "$" + "" + "$" + "" + "$" + "" + "$" + Session["usercode"].ToString() + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$50";
                          camspcode = "CMS10";
                          paramcount = 19;
                          ws.Timeout = 9999999;
                          ds = ws.ExDataSetFirst(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString());
                          ws.Dispose();

                          if (ds.Tables[0].Columns[0].ColumnName.ToString() == "INFO")
                          {
                              btnClear_Click(sender, e);
                              lblMsg.Visible = true;
                              lblMsg.Text = "EVSN " + ds.Tables[0].Rows[0][0].ToString() + ". ID No :  " + ddl_evsn_agm[0].ToString().Trim(); ;
                              isin_details();
                              txtremark.Text = "";

                              ddl_isin_det.Focus();
                              return;
                          }

                          else
                          {
                              lblErrMsg.Visible = true;
                              lblErrMsg.Text = ds.Tables[0].Rows[0][0].ToString();
                              return;
                          }
                     // }
                }


                else
                {

                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = ds.Tables[0].Rows[0][0].ToString();


                    return;

                }
            }
            if (Session["FolderName"] != null)
            {
                if (Directory.Exists(Server.MapPath("../uploads/" + Convert.ToString(Session["FolderName"]))))
                {
                    try
                    {
                        FileRes_Upload = null;
                        HRes_File.Value = null;
                        Uploadphoto = null;
                        HLogo_File.Value = null;

                        Directory.Delete(Server.MapPath("../uploads/" + Convert.ToString(Session["FolderName"])), true);
                    }
                    catch
                    {

                    }
                }
            }
        }

        catch (Exception EX)
        {
            lblErrMsg.Visible = true;
            lblErrMsg.Text = EX.Message.ToString();
            return;
        }
    }
    byte[] ReadFile(string sPath)
    {
        //Initialize byte array with a null value initially.
        byte[] data = null;

        //Use FileInfo object to get file size.
        FileInfo fInfo = new FileInfo(sPath);
        long numBytes = fInfo.Length;

        //Open FileStream to read file
        FileStream fStream = new FileStream(sPath, FileMode.Open, FileAccess.Read);

        //Use BinaryReader to read file stream into byte array.
        BinaryReader br = new BinaryReader(fStream);

        //When you use BinaryReader, you need to supply number of bytes to read from file.
        //In this case we want to read entire file. So supplying total number of bytes.
        data = br.ReadBytes((int)numBytes);
        return data;
    }

    private void Clear(string val)
    {
        txt_isin.Enabled = true;
        ddl_isin_det.Enabled = true;
        txt_isin_name.Enabled = true;
        ddltype.Enabled = true;
        drp_evsn_type.Enabled = true;
        txt_Tot_Nof_Shares.Enabled = true;
        txt_nom_val.Enabled = true;
        txt_vot_rights.Enabled = true;
        Drp_Vot_rghts_rndoff.Enabled = true;
        Drp_Access_Via_Internet.Enabled = true;
        txt_Ltd_IPaddr.Enabled = true;
        ddl_Rta.Enabled = true;
        ddl_Scrutinizer.Enabled = true;
        Txt_Scrutinzer_Access.Enabled = true;
        ddl_All_Ball_Status.Enabled = true;

        DropDownAbstain_vote.Enabled = true;
        //if (val != "C")
        //{
            lblErrMsg.Text = "";
            lblMsg.Text = "";
            lblErrMsg.Visible = false;
            lblMsg.Visible = false;
        //}
        txt_isin.Text = "";
        ddl_isin_det.SelectedIndex = 0;
        txt_isin_name.Text = "";
        ddltype.SelectedIndex = 0;
        drp_evsn_type.SelectedIndex = 0;
        txt_Tot_Nof_Shares.Text = "";
        txt_nom_val.Text = "";
        txt_vot_rights.Text = "";
        Drp_Vot_rghts_rndoff.SelectedIndex = 0;
        Drp_Access_Via_Internet.SelectedIndex = 0;
        txt_Ltd_IPaddr.Text = "";
        camparamname = "ARG_CLIENT_CODE$ARG_COMPANY_CODE$ARG_LOT_CODE$ARG_BATCH_NO$ARG_BOOK_NO$ARG_SNO$ARG_LOCATION_CODE$ARG_DOC_TYPE$ARG_FROM_NO$ARG_TO_NO$ARG_LOT_RECEIPT_DATE$ARG_USER_CODE$ARG_FROM_YEAR$ARG_TO_YEAR$ARG_CAF_MONTH$ARG_CREATED_DATE$ARG_NAME$ARG_TO_MONTH$ARG_FLAG";
        camparameter = Session["client_code"] + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + Session["usercode"].ToString() + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$20";
        camspcode = "CMS10";
        paramcount = 19;
        ws.Timeout = 9999999;
        ds5.Clear();
        ds5 = ws.ExDataSetFirst(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString());
        ws.Dispose();

        if (ds5.Tables[0].Rows.Count > 0)//EV RTA .Rows[0][1].ToString() == "G199"
        {

            ddl_Rta.Items.Clear();
            ddl_Scrutinizer.Items.Clear();
            for (int i = 0; i <= ds5.Tables[0].Rows.Count - 1; i++)
            {
                if (ds5.Tables[0].Rows[i][1].ToString().Contains("G199"))

                    this.ddl_Rta.Items.Add(ds5.Tables[0].Rows[i][0].ToString());
                else
                    this.ddl_Scrutinizer.Items.Add(ds5.Tables[0].Rows[i][0].ToString());
            }
            ddl_Rta.Items.Insert(0, "--Select--");
            ddl_Scrutinizer.Items.Insert(0, "--Select--");

        }
        Txt_Scrutinzer_Access.Text = "";
        ddl_All_Ball_Status.SelectedIndex = 0;
        //ddl_Evsn_Appr_Status.SelectedItem.Text = "--Select--";
        ddl_Evsn_Appr_Status.SelectedIndex = 0;
        //ddl_Evsn_Appr_Status.SelectedItem.Text = "--Select--";
        DropDownAbstain_vote.SelectedIndex = 0;
        ddl_Evsn_Appr_Status.Enabled = false;
        Lbl_Rta_confm_status.Text = "NO";
        Lbl_Rta_confm_status.Enabled = false;
        txt_hold_date.Text = "";
        Fileupload.Text = "";
        lbl_rta_remarks.Text = "";
        Notice_file.Visible = false;
        Hold_date.Visible = false;
        BtnNew.Visible = true;
        isin_details();
        ddl_isin_det.Focus();
    }

    protected void btnClear_Click(object sender, EventArgs e)
    {
        if (Session["Issuer"] == "G198")
        {
            Clear("C");
        }
        if (Session["RTA"] == "G199")
        {
            txt_isin.Text = "";
            ddl_isin_det.SelectedIndex = 0;
            txt_isin_name.Text = "";
            ddltype.SelectedIndex = 0;
            drp_evsn_type.SelectedIndex = 0;
            txt_Tot_Nof_Shares.Text = "";
            txt_nom_val.Text = "";
            txt_vot_rights.Text = "";
            Drp_Vot_rghts_rndoff.SelectedIndex = 0;
            Drp_Access_Via_Internet.SelectedIndex = 0;
            txt_Ltd_IPaddr.Text = "";
            ddl_Rta.SelectedIndex = 0;
            ddl_Scrutinizer.SelectedIndex = 0;
            ddl_Rta.SelectedIndex = 0;
            Txt_No_of_Res.Text = "";
            ddl_Rta.SelectedItem.Text = "--Select--";
            ddl_Scrutinizer.SelectedItem.Text = "--Select--";
            Txt_Scrutinzer_Access.Text = "";
            ddl_All_Ball_Status.SelectedIndex = 0;
            ddl_Evsn_Appr_Status.SelectedIndex = 0;
            ddl_All_Ball_Status.SelectedItem.Text = "--Select--";
            ddl_Evsn_Appr_Status.SelectedIndex = 0;
            DropDownAbstain_vote.SelectedItem.Text = "--Select--";
            Txt_Vot_Start_Time.Text = "";
            Txt_Vot_End_Time.Text = "";
            Txt_Meet_Start_Date_Time.Text = "";
            ddl_isin_det.SelectedIndex = 0;
            FileResUpload.Enabled = true;
            FileLogoUpload.Enabled = true;
            Rom_File_Upload.Enabled = true;
            ddl_Disp_All_Infrm.Enabled = false;
            txt_Ltd_IPaddr.Enabled = false;
            Lbl_Rta_confm_status.Text = "NO";
            Lbl_Rta_confm_status.Enabled = false;
            Res_File.Visible = true;
            FilePro_File1.Disabled = false;
            Upload_Photo1.Disabled = false;
            Txt_Res_Desc.Enabled = true;
            Txt_No_of_Res.Enabled = true;
            CollapsiblePanelExtender11.Collapsed = true;
            this.CollapsiblePanelExtender11.ClientState = "true";
            ddl_Evsn_Appr_Status.Enabled = false;
            Txt_Vot_Start_Time.Enabled = true;
            Txt_Vot_End_Time.Enabled = true;
            Txt_Meet_Start_Date_Time.Enabled = true;
            txt_resno.Enabled = true;
            txtCaptcha.Visible = false;
            Image1.Visible = false;
            btn_refresh.Visible = false;
            HRes_File.Visible = false;
            Res_File.Text = "";
            Logo_File.Text = "";
            txt_hold_date.Text = "";
            Fileupload.Text = "";
            txt_resno.Text = "";
            Txt_Res_Desc.Text = "";
            lbl_rta_remarks.Text = "";
            this.GridView1.DataSource = null;
            Notice_file.Visible = true;
            Hold_date.Visible = true;
            GridView1.DataBind();
            ddl_isin_det.Focus();
            Page.SetFocus("ddl_isin_det");
            lblErrMsg.Text = "";
            lblMsg.Text = "";
            lblErrMsg.Visible = false;
            lblMsg.Visible = false;



        }
        if (Session["EVRTA"] == "G200")
        {
            //lblErrMsg.Text = "";
            // lblMsg.Text = "";
            txt_isin.Text = "";
            ddl_isin_det.SelectedIndex = 0;
            txt_isin_name.Text = "";
            ddltype.SelectedIndex = 0;
            drp_evsn_type.SelectedIndex = 0;
            txt_Tot_Nof_Shares.Text = "";
            txt_nom_val.Text = "";
            txt_vot_rights.Text = "";
            Drp_Vot_rghts_rndoff.SelectedIndex = 0;
            Drp_Access_Via_Internet.SelectedIndex = 0;
            txt_Ltd_IPaddr.Text = "";
            ddl_Rta.SelectedIndex = 0;
            ddl_Scrutinizer.SelectedIndex = 0;
            ddl_Rta.SelectedIndex = 0;
            Txt_No_of_Res.Text = "";
            ddl_Rta.SelectedItem.Text = "--Select--";
            ddl_Scrutinizer.SelectedItem.Text = "--Select--";
            Txt_Scrutinzer_Access.Text = "";
            ddl_All_Ball_Status.SelectedIndex = 0;
            ddl_Evsn_Appr_Status.SelectedIndex = 0;
            ddl_All_Ball_Status.SelectedItem.Text = "--Select--";
            ddl_Evsn_Appr_Status.SelectedItem.Text = "--Select--";
            Res_File.Text = "";
            Logo_File.Text = "";
            Txt_Vot_Start_Time.Text = "";
            Txt_Vot_End_Time.Text = "";
            Txt_Meet_Start_Date_Time.Text = "";
            HRes_File.Visible = false;
            FileResUpload.Enabled = true;
            FileLogoUpload.Enabled = true;
            Rom_File_Upload.Enabled = true;
            ddl_Disp_All_Infrm.Enabled = false;
            txt_Ltd_IPaddr.Enabled = false;
            Lbl_Rta_confm_status.Text = "NO";
            Lbl_Rta_confm_status.Enabled = false;
            Res_File.Visible = false;
            FilePro_File1.Disabled = false;
            Upload_Photo1.Disabled = false;
            Txt_Res_Desc.Enabled = false;
            Txt_No_of_Res.Enabled = false;
            CollapsiblePanelExtender11.Collapsed = true;
            this.CollapsiblePanelExtender11.ClientState = "true";
            ddl_Evsn_Appr_Status.SelectedIndex = 2;
            ddl_Evsn_Appr_Status.Enabled = false;
            Txt_Vot_Start_Time.Enabled = false;
            Txt_Vot_End_Time.Enabled = false;
            Txt_Meet_Start_Date_Time.Enabled = false;
            txt_resno.Enabled = false;
            txtCaptcha.Text = "";
            ddl_Disp_All_Infrm.SelectedIndex = 0;
            Fileupload.Text = "";
            txt_hold_date.Text = "";
            Change_Captcha();
            txtCaptcha.Visible = true;
            Image1.Visible = true;
            btn_refresh.Visible = true;
            BtnNew.Visible = false;
            Txt_No_of_Res.Text = "";
            Txt_Res_Desc.Text = "";
            remarks.Visible = true;
            remark1.Visible = true;
            txtremark.Text = "";
            GridView1.DataSource = null;
            GridView1.DataBind();
            lblErrMsg.Text = "";
            lblMsg.Text = "";
            lblErrMsg.Visible = false;
            lblMsg.Visible = false;
            ddl_isin_det.Focus();
        }
        if (Session["SCRUTINIZER"] == "G201")
        {
            ddl_Disp_All_Infrm.SelectedIndex = 0;
            ddl_Disp_All_Infrm.Focus();
        }

        HRes_File.Value = "";
        HLogo_File.Value = "";
    }

    protected void Btnadd_Click(object sender, EventArgs e)
    {
        try
        {
            lblErrMsg.Visible = false;
            lblMsg.Visible = false;
            lblErrMsg.Text = "";
            lblMsg.Text = "";
            FilePro_File = FilePro_File1.PostedFile;
            Upload_Photo = Upload_Photo1.PostedFile;
            string Voting_end_date = "";
            string Voting_end_datehrs = "";
            DateTime startDate = new DateTime();
            string[] txt_vo;
            string[] Vote_end_hrs;
            string[] ddl_evsn_agm;

            if (ddl_isin_det.SelectedItem.Text == "" || ddl_isin_det.SelectedItem.Text.ToString() == "Select")
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "Kindly Select ISIN Details";
                ddl_isin_det.Focus();
                return;
            }

            string Voting_start_date = "";
            string Voting_start_datehrs = "";
            lblErrMsg.Text = "";
            if (Txt_Vot_Start_Time.Text.ToString() == "")
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "Kindly Enter Voting Start Date and Time";
                Txt_Vot_Start_Time.Focus();
                return;
            }

            txt_vo = Txt_Vot_Start_Time.Text.ToString().Split(' ');
            Voting_start_date = Txt_Vot_Start_Time.Text.ToString().Split(' ')[0];
            Voting_start_datehrs = txt_vo[1].ToString().Substring(0, 2);

            DateTime t2 = new DateTime();
            if (!DateTime.TryParseExact(Txt_Vot_Start_Time.Text, "dd/MM/yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out t2))// hh:mm:tt
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "Invalid Voting Start Date and Time";
                Txt_Vot_Start_Time.Focus();
                return;
            }
            else
            {
                Txt_Vot_Start_Time.Text = t2.ToString("dd/MM/yyyy HH:mm");
            }
            if (Txt_Vot_End_Time.Text.ToString() == "")
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "Kindly Enter Voting End Date and Time";
                Txt_Vot_End_Time.Focus();
                return;
            }

            Vote_end_hrs = (Txt_Vot_End_Time.Text.ToString() + " 17:00").Split(' ');
            Voting_end_date = Txt_Vot_End_Time.Text.ToString().Split(' ')[0];
            Voting_end_datehrs = Vote_end_hrs[1].ToString().Substring(0, 2);

            if (t2.Date < DateTime.Now.Date)
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "Start date (" + Txt_Vot_Start_Time.Text + " ) shouldn't be less than Current Date";
                //Txt_Vot_Start_Time.Text = "";
                Txt_Vot_Start_Time.Focus();
                return;
            }

            DateTime t1 = new DateTime();
            if (!DateTime.TryParseExact((Txt_Vot_End_Time.Text.ToString() + " 17:00"), "dd/MM/yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out t1))// hh:mm:tt
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "Invalid Voting End Date (" + Txt_Vot_End_Time.Text + " )";
                // Txt_Vot_End_Time.Text = "";
                Txt_Vot_End_Time.Focus();

                return;
            }
            else
            {
                Session["enddat"] = t1;
                Txt_Vot_End_Time.Text = t1.ToString("dd/MM/yyyy");
            }

            if (Voting_end_date == Voting_start_date)
            {
                TimeSpan ts = t1.Subtract(t2);
                if (Convert.ToInt32(ts.ToString().Split(':')[0]) < 2)
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Voting End time and Start time should be between 2 Hrs ";
                    lblErrMsg.ForeColor = System.Drawing.Color.Red;
                    return;
                }
            }
            else
            {
                int days = Convert.ToInt32((t1 - t2).TotalDays);
                if (days < 3)
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Voting End date and Start date should be between 3 days ";
                    lblErrMsg.ForeColor = System.Drawing.Color.Red;
                    return;
                }
                else
                {
                    Txt_Meet_Start_Date_Time.Focus();
                    //return;
                }
            }

            DateTime t3 = new DateTime();
            if (!DateTime.TryParseExact(Txt_Meet_Start_Date_Time.Text, "dd/MM/yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out t3))// hh:mm:tt
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "Invalid Voting Meeting Start Date /Time (" + Txt_Meet_Start_Date_Time.Text + ")";
                //Txt_Meet_Start_Date_Time.Text = "";
                Txt_Meet_Start_Date_Time.Focus();
                return;
            }
            else
            {
                Txt_Meet_Start_Date_Time.Text = t3.ToString("dd/MM/yyyy HH:mm");
            }

            if (Session["enddat"] != null)
            {
                if (t3.Date < ((DateTime)Session["enddat"]).Date)
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Meeting date (" + Txt_Meet_Start_Date_Time.Text + " ) shouldn't be Less than End date";
                    //Txt_Meet_Start_Date_Time.Text = "";
                    Txt_Meet_Start_Date_Time.Focus();
                    return;
                }
            }

            if (FilePro_File.FileName != "" || Upload_Photo.FileName != "")
            {
                if (FilePro_File.FileName == Upload_Photo.FileName)
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Profile & Photo should not be same.";
                    return;
                }
            }

            //FilePro_File = Request.Files["FilePro_File1"];
            //Upload_Photo = Upload_Photo1.PostedFile;

            //HttpPostedFile FilePro_File1 = Request.Files["FilePro_File1"];

            //Session["FileUpload1"] = FileUpload1;

            //HttpPostedFile Upload_Photo = Request.Files["Upload_Photo"];





            dt.Columns.Add("Sno", typeof(System.Int32));
            dt.Columns.Add("Resolution", typeof(System.String));
            dt.Columns.Add("Profile File", typeof(System.String));
            dt.Columns.Add("Upload", typeof(System.String));
            dt.Columns.Add("HiddenPhoto", typeof(System.String));
            dt.Columns.Add("HiddenUpload", typeof(System.String));
            dt.Columns.Add("Res_ID", typeof(System.String));
            DataRow dr = null;
            int fileSize = 0;
            int Upload_img_Size = 0;
            int sno = 1;
            if (ViewState["row"] == null || ViewState["row"] == "")//((DataTable)ViewState["row"]).Rows.Count
            {
                Regex nonNumericRegex = new Regex(@"\D");
                if (Txt_No_of_Res.Text == "")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Kindly Enter the Number Of Resolution";
                    Txt_No_of_Res.Focus();
                    return;
                }

                if (nonNumericRegex.IsMatch(Txt_No_of_Res.Text))
                {
                    //Contains non numeric characters.
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Invalid  No.of Resolution";
                    Txt_No_of_Res.Focus();
                    return;
                }
                if (Txt_Res_Desc.Text == "")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Kindly Enter the Resolution Desc";
                    Txt_Res_Desc.Focus();
                    return;
                }
                if (txt_resno.Text == "")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Kindly Enter the Resolution Number";
                    txt_resno.Focus();
                    return;
                }
                if (nonNumericRegex.IsMatch(txt_resno.Text))
                {
                    //Contains non numeric characters.
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Invalid  No.of Resolution";
                    txt_resno.Focus();
                    return;
                }
                if (FilePro_File == null)
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Choose Profile File";
                    FilePro_File1.Focus();
                    return;
                }
                if (Upload_Photo == null)
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Choose Upload File";
                    Upload_Photo1.Focus();
                    return;
                }


                //res = Txt_Res_Desc.Text.Trim();
                res = Txt_Res_Desc.Text.Trim().Replace("&", "and ");
                string[] FName;
                string UPpath = "";
                string folder_profile_name = "";
                if (FilePro_File.FileName != "")
                {
                    FName = FilePro_File.FileName.Split('.');
                    UPpath = FName[0] + GetDateTime() + "." + FName[1];
                    Fileprofile = Path.GetFileName(UPpath);
                    folder_profile_name = Server.MapPath("../uploads/") + Convert.ToString(Session["FolderName"]);
                    Filepath = folder_profile_name + Fileprofile;// + Session["ID"]


                    if (FName[1].ToString().ToLower() != "jpg")
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Profile File Image Should be jpg Format only.";
                        FilePro_File1.Focus();
                        return;

                    }
                    if (Directory.Exists(folder_profile_name) == false)
                    {
                        Directory.CreateDirectory(folder_profile_name);
                    }

                    //string File_Path_profile_check = Server.MapPath("../uploads/" + Fileprofile);// + Session["ID"]

                    fileSize = (FilePro_File.ContentLength / 1024) / 1024;
                    if (File.Exists(Filepath) == false)
                    {
                        FilePro_File.SaveAs(Filepath);
                    }
                }



                if (Upload_Photo.FileName != "")
                {

                    string[] FName1 = Upload_Photo.FileName.Split('.'); ;
                    UPpath = FName1[0] + GetDateTime() + "." + FName1[1]; ;
                    Uploadphoto = Path.GetFileName(UPpath);
                    // folder_profile_name="../uploads/" + Convert.ToString(Session["FolderName"];
                    Uplodpath = folder_profile_name + Uploadphoto;// + Session["ID"]  
                    folder_profile_name = Server.MapPath("../uploads/") + Convert.ToString(Session["FolderName"]);
                    if (FName1[1].ToString().ToLower() != "jpg")
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Upload Image Should be jpg Format only.";
                        FilePro_File1.Focus();
                        return;

                    }
                    if (Directory.Exists(folder_profile_name) == false)
                    {
                        Directory.CreateDirectory(folder_profile_name);
                    }

                    // string Photo_path_check = Server.MapPath("../uploads/" + Uploadphoto);// + Session["ID"]
                    Upload_img_Size = (Upload_Photo.ContentLength / 1024) / 1024;

                    if (fileSize > 2)// Allow only files less than 2,100,000 bytes (approximately 2 MB) to be uploaded.
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Profile File Images Should Less than 2 MB size limit.";
                        FilePro_File1.Focus();
                        return;
                    }

                    if (Upload_img_Size > 2)// Allow only files less than 2,100,000 bytes (approximately 2 MB) to be uploaded.
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Uplaod File Images Should Less than 2 MB size limit.";
                        Upload_Photo1.Focus();
                        return;
                    }
                    if (File.Exists(Uplodpath) == false)
                    {
                        Upload_Photo.SaveAs(Uplodpath);
                    }
                }


                //FilePro_File.SaveAs(Filepath);
                //Upload_Photo.SaveAs(Uplodpath);


                dr = dt.NewRow();
                GridView1.Columns[6].Visible = false;//Res_id
                GridView1.Columns[4].Visible = false;//Hidden Photo Desc
                GridView1.Columns[5].Visible = false;//Hidden Upload Desc
                GridView1.Columns[7].Visible = true;//delete 
                GridView1.Columns[8].Visible = false;//EDIT 
                dr["Sno"] = txt_resno.Text.Trim();
                dr["Resolution"] = res;//"Resolution"
                dr["Profile File"] = Filepath;//"Profile"
                dr["Upload"] = Uplodpath;//"Upload"
                dr["HiddenPhoto"] = Filepath;//"Upload"
                dr["HiddenUpload"] = Uplodpath;//"Upload"
                Txt_No_of_Res.Enabled = false;
                dt.Rows.Add(dr);

                DataView dv = dt.DefaultView;
                dv.Sort = "Sno asc";
                DataTable sortedDT = dv.ToTable();

                ViewState["row"] = sortedDT;
                GridView1.DataSource = ViewState["row"];
                GridView1.DataBind();

                color_bind();

                Txt_Res_Desc.Text = "";
                txt_resno.Text = "";
                txt_resno.Enabled = true;
                Int32 num = Convert.ToInt32(Txt_No_of_Res.Text);
                if (dt.Rows.Count == num)
                {
                    btnSubmit.Enabled = true;
                    // return;
                }
                else
                {
                    btnSubmit.Enabled = false;

                }
                txt_resno.Focus();
            }
            else
            {
                sno = sno + 1;
                Int32 num = Convert.ToInt32(Txt_No_of_Res.Text);
                dt = (DataTable)ViewState["row"];
                if (dt.Rows.Count >= num)
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.ForeColor = Color.Red;
                    Txt_No_of_Res.Enabled = true;
                    lblErrMsg.Text = "Given Number of Resolution Count Exceed";
                    btnSubmit.Focus();
                    return;
                }

                //DataView dv = dt.DefaultView;
                //dv.RowFilter = "Sno ="+ txt_resno.Text;
                //DataTable RowDT = dv.ToTable();

                //if (RowDT.Rows.Count > 0)
                //{
                //    lblErrMsg.Visible = true;
                //    lblErrMsg.ForeColor = Color.Red;
                //    Txt_No_of_Res.Enabled = true;
                //    lblErrMsg.Text = "Already resolution number exist";
                //    btnSubmit.Focus();
                //    return;
                //}

                if (GridView1.Rows.Count > 0)
                {
                    for (int i = 0; i <= dt.Rows.Count - 1; i++)
                    {
                        if (dt.Rows[i][0].ToString() == txt_resno.Text.Trim())
                        {
                            lblErrMsg.Visible = true;
                            lblErrMsg.Text = "Already resolution number exist";
                            txt_resno.Focus();
                            return;
                        }
                    }
                }

                if (dt.Rows.Count < num)
                {
                    Regex nonNumericRegex = new Regex(@"\D");

                    if (txt_resno.Text == "")
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Kindly Enter the Resolution Number";
                        txt_resno.Focus();
                        return;
                    }

                    if (nonNumericRegex.IsMatch(txt_resno.Text))
                    {
                        //Contains non numeric characters.
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Invalid  No.of Resolution";
                        txt_resno.Focus();
                        return;
                    }
                    if (Txt_Res_Desc.Text == "")
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Kindly Enter the Resolution Desc";
                        Txt_Res_Desc.Focus();
                        return;
                    }
                    //if (FilePro_File.ContentLength == 0)
                    //{
                    //    lblErrMsg.Visible = true;
                    //    lblErrMsg.Text = "Choose Profile File";
                    //    FilePro_File1.Focus();
                    //    return;
                    //}
                    //if (Upload_Photo.ContentLength == 0)
                    //{
                    //    lblErrMsg.Visible = true;
                    //    lblErrMsg.Text = "Choose Upload File";
                    //    Upload_Photo1.Focus();
                    //    return;
                    //}
                }
                //res = Txt_Res_Desc.Text.Trim();
                res = Txt_Res_Desc.Text.Trim().Replace("&", "and ");
                string[] FName;
                string fpath = "";
                string folder_profile_name = "";
                string[] FName1;
                string UPpath1 = "";
                if (FilePro_File.FileName != "")
                {
                    Fileprofile = Path.GetFileName(FilePro_File.FileName);
                    FName = Fileprofile.Split('.');
                    fpath = FName[0] + GetDateTime() + "." + FName[1];
                    folder_profile_name = Server.MapPath("../uploads/") + Convert.ToString(Session["FolderName"]);
                    Filepath = folder_profile_name + Fileprofile;// + Session["ID"]


                    if (FName[1].ToString().ToLower() != "jpg")
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Profile File Image Should be jpg Format only.";
                        FilePro_File1.Focus();
                        return;

                    }
                    if (Directory.Exists(folder_profile_name) == false)
                    {
                        Directory.CreateDirectory(folder_profile_name);
                    }


                    //Filepath = Server.MapPath("../uploads/" + Convert.ToString(Session["FolderName"]) + Fileprofile);// + Session["ID"
                    fileSize = (FilePro_File.ContentLength / 1024) / 1024;
                    if (File.Exists(Filepath) == false)
                    {
                        FilePro_File.SaveAs(Filepath);
                    }
                }

                if (Upload_Photo.FileName != "")
                {

                    Uploadphoto = Path.GetFileName(Upload_Photo.FileName);
                    //Uplodpath = Server.MapPath("../uploads/" + Uploadphoto);// + Session["ID"]
                    //Uplodpath = Server.MapPath("../uploads/" + Convert.ToString(Session["FolderName"]) + Uploadphoto);// + Session["ID"]   
                    FName1 = Uploadphoto.Split('.');
                    UPpath1 = FName1[0] + GetDateTime() + "." + FName1[1];
                    folder_profile_name = Server.MapPath("../uploads/") + Convert.ToString(Session["FolderName"]);
                    Uplodpath = folder_profile_name + Uploadphoto;// + Session["ID"]
                    if (FName1[1].ToString().ToLower() != "jpg")
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Upload Image Should be jpg Format only.";
                        FilePro_File1.Focus();
                        return;

                    }
                    if (Directory.Exists(folder_profile_name) == false)
                    {
                        Directory.CreateDirectory(folder_profile_name);
                    }
                    Upload_img_Size = (Upload_Photo.ContentLength / 1024) / 1024;
                    if (fileSize > 2)// Allow only files less than 2,100,000 bytes (approximately 2 MB) to be uploaded.
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Profile File Images Should Less than 2 MB size limit.";
                        FilePro_File1.Focus();
                        return;
                    }
                    if (Upload_img_Size > 2)// Allow only files less than 2,100,000 bytes (approximately 2 MB) to be uploaded.
                    {
                        lblErrMsg.Visible = true;
                        lblErrMsg.Text = "Upload File Images Should Less than 2 MB size limit.";
                        Upload_Photo1.Focus();
                        return;
                    }

                    if (File.Exists(Uplodpath) == false)
                    {
                        Upload_Photo.SaveAs(Uplodpath);
                    }
                }

                if (Upload_Photo.FileName != "" || FilePro_File.FileName != "")
                {
                    if (GridView1.Rows.Count > 0)
                    {
                        for (int i = 0; i <= dt.Rows.Count - 1; i++)
                        {
                            if (dt.Rows[i][2].ToString() != "" && dt.Rows[i][3].ToString() != "")
                            {
                                if (fpath != "" && dt.Rows[i][2].ToString().ToString().Substring(0, 5) != "")
                                {
                                    if (Path.GetFileName(fpath).ToString().Substring(0, 5) == Path.GetFileName(dt.Rows[i][2].ToString()).ToString().Substring(0, 5))
                                    {
                                        lblErrMsg.Visible = true;
                                        lblErrMsg.Text = "SNO " + dt.Rows[i][0].ToString() + "  and  " + txt_resno.Text.Trim() + " Profile File Images Same please change.  ";
                                        Upload_Photo1.Focus();
                                        return;

                                    }
                                }
                                if (UPpath1 != "" && dt.Rows[i][3].ToString().ToString().Substring(0, 5) != "")
                                {
                                    if (Path.GetFileName(UPpath1).ToString().Substring(0, 5) == Path.GetFileName(dt.Rows[i][3].ToString()).ToString().Substring(0, 5))
                                    {
                                        lblErrMsg.Visible = true;
                                        lblErrMsg.Text = "SNO " + dt.Rows[i][0].ToString() + "  and  " + txt_resno.Text.Trim() + " Upload Photo Images Same please change.  ";
                                        Upload_Photo1.Focus();
                                        return;

                                    }
                                }
                            }
                        }
                    }
                }

                dr = dt.NewRow();
                GridView1.Columns[6].Visible = false;//Res_id
                GridView1.Columns[4].Visible = false;//Hidden Photo Desc
                GridView1.Columns[5].Visible = false;//Hidden Upload Desc
                GridView1.Columns[7].Visible = true;//delete 
                GridView1.Columns[8].Visible = false;//EDIT 
                dr["Sno"] = txt_resno.Text.Trim();
                dr["Resolution"] = res;//"Resolution"
                dr["Profile File"] = Filepath;//"Profile"
                dr["Upload"] = Uplodpath;//"Upload"
                dr["HiddenPhoto"] = Filepath;//"Upload"
                dr["HiddenUpload"] = Uplodpath;//"Upload"
                dt.Rows.Add(dr);

                DataView dv1 = dt.DefaultView;
                dv1.Sort = "Sno asc";
                DataTable sortedDT = dv1.ToTable();

                ViewState["row"] = sortedDT;
                //ViewState["row"] = dt;
                GridView1.DataSource = ViewState["row"];
                GridView1.DataBind();

                color_bind();
                Txt_Res_Desc.Text = "";
                txt_resno.Text = "";
                txt_resno.Enabled = true;
                //Txt_Res_Desc.Focus();
                if (dt.Rows.Count == num)
                {
                    btnSubmit.Enabled = true;
                    btnSubmit.Focus();
                    // return;
                }
                else
                {
                    btnSubmit.Enabled = false;
                }
                txt_resno.Focus();
            }

        }

        catch (Exception EX)
        {
            lblErrMsg.Visible = true;
            lblErrMsg.Text = EX.Message.ToString();
            return;
        }

    }

    private void color_bind()
    {
        foreach (GridViewRow row in GridView1.Rows)
        {
            string profile = dt.Rows[row.RowIndex][2].ToString();
            string Upload = dt.Rows[row.RowIndex][3].ToString();
            row.Cells[2].ForeColor = Color.Empty;
            row.Cells[3].ForeColor = Color.Empty;

            if (profile == "")
            {

                row.Cells[2].ForeColor = Color.Maroon;
            }
            if (Upload == "")
            {
                row.Cells[3].ForeColor = Color.Maroon;
            }
        }
    }

    protected void GridView1_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            lblErrMsg.Visible = false;
            DataTable dt = (DataTable)ViewState["row"];
            int rowIndex = Convert.ToInt32(e.RowIndex);
            dt.Rows.Remove(dt.Rows[rowIndex]);
            if (dt.Rows.Count == 0)
            {
                ViewState["row"] = null;
            }
            dt.AcceptChanges();
            ViewState["row"] = dt;
            GridView1.DataSource = ViewState["row"];
            GridView1.DataBind();

            Int32 num = Convert.ToInt32(Txt_No_of_Res.Text);
            if (dt.Rows.Count == num)
            {
                btnSubmit.Enabled = true;
                // return;
            }
            else
            {
                btnSubmit.Enabled = false;
                txt_resno.Focus();

            }
        }

        catch (Exception EX)
        {
            lblErrMsg.Visible = true;
            lblErrMsg.Text = EX.Message.ToString();
            return;
        }
    }
    protected void GridView1_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            lblErrMsg.Visible = false;
            lblMsg.Visible = false;
            lblMsg.Text = "";
            lblErrMsg.Text = "";
            string photo = "";
            int index = Convert.ToInt32(e.CommandArgument);
            DataTable dt = (DataTable)ViewState["row"];
            if (e.CommandName == "Profile File")
            {

                //GridViewRow row = GridView1.Rows[index];
                //photo = row.Cells[3].Text;
                photo = dt.Rows[index][2].ToString();
                String filename2 = photo;
                string Uploadphoto = Path.GetFileName(filename2);
                if (File.Exists(filename2) == true)
                {
                    HttpContext.Current.Response.ContentType = "APPLICATION/OCTET-STREAM";
                    String Header = "Attachment; Filename=" + Uploadphoto;
                    HttpContext.Current.Response.AppendHeader("Content-Disposition", Header);
                    System.IO.FileInfo Dfile = new System.IO.FileInfo(filename2);
                    HttpContext.Current.Response.WriteFile(Dfile.FullName);
                    HttpContext.Current.Response.End();
                }

                else
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "No files found ";
                    lblErrMsg.ForeColor = System.Drawing.Color.Red;
                }

            }
            else if (e.CommandName == "Upload Photo")
            {


                //GridViewRow row = GridView1.Rows[index];

                //photo = row.Cells[4].Text;
                photo = dt.Rows[index][3].ToString();
                String filename2 = photo;
                string Uploadphoto = Path.GetFileName(filename2);
                if (File.Exists(filename2) == true)
                {
                    HttpContext.Current.Response.ContentType = "APPLICATION/OCTET-STREAM";
                    String Header = "Attachment; Filename=" + Uploadphoto;
                    HttpContext.Current.Response.AppendHeader("Content-Disposition", Header);
                    System.IO.FileInfo Dfile = new System.IO.FileInfo(filename2);
                    HttpContext.Current.Response.WriteFile(Dfile.FullName);
                    HttpContext.Current.Response.End();
                }

                else
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "No files found ";
                    lblErrMsg.ForeColor = System.Drawing.Color.Red;
                }
            }
            else if (e.CommandName == "Edit1")
            {
                //GridViewRow row = GridView1.Rows[index];
                txt_resno.Text = dt.Rows[index][0].ToString();
                Txt_Res_Desc.Text = dt.Rows[index][1].ToString();
                Session["Rid"] = dt.Rows[index][6].ToString();
                Txt_No_of_Res.Enabled = false;
                txt_resno.Enabled = false;
                Txt_Res_Desc.Focus();
                // GridView1.EditIndex = -1;  
                return;

            }
            else
            {
                return;
            }


        }

        catch (Exception EX)
        {
            //lblErrMsg.Visible = true;
            //lblErrMsg.Text = EX.Message.ToString();
            return;
        }
    }
    protected void ddl_isin_det_SelectedIndexChanged(object sender, EventArgs e)
    {
        lblErrMsg.Visible = false;
        lblMsg.Visible = false;
        lblErrMsg.Text = "";
        lblMsg.Text = "";
        Session["Res_File_Path"] = "";
        Session["Logo_File_Path"] = "";
        Session["Uplaod_File"] = "";
        ViewState["row"] = "";
        string fulPath = "";
        string LogofullPath = "";
        string profile_fullpath = "";
        string Upload_fullpath = "";
        string upload_path_details = "";
        string UploadFilepath = "";
        Session["Path"] = "";
        Logo_File.Text = "";
        Res_File.Text = "";
        Rom_File.Text = "";
        Txt_Vot_Start_Time.Text = "";
        Txt_Vot_End_Time.Text = "";
        Txt_Meet_Start_Date_Time.Text = "";

        GridView1.DataSource = null;
        GridView1.DataBind();
        try
        {
            //if (Session["Issuer"] != "G198")
            //{

            if (ddl_isin_det.SelectedItem.Text == "" || ddl_isin_det.SelectedItem.Text.ToString() == "Select" && txt_isin.Text == "")
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Kindly Select ISIN Details";
                    ddl_isin_det.Focus();
                    return;
                }
            //}

            else
            {
                if (ddl_isin_det.SelectedItem.Text.ToString() == "Select" && txt_isin.Text !="")
                {
                    btnClear_Click(sender, e);
                    txt_isin.Text = "";
                    BtnNew.Visible = true;
                    Txt_No_of_Res.Text = "";
                    txt_hold_date.Enabled = true;
                    FileUpload1.Enabled = true;
                    btnSubmit.Enabled = true;
                    txt_isin.Focus();
                    return;
                }
            }

            string[] evsn_split;
            evsn_split = ddl_isin_det.Text.Split('-');
            string[] Rom_split;
            string profile_path_details = "";
            camparamname = "ARG_CLIENT_CODE$ARG_COMPANY_CODE$ARG_LOT_CODE$ARG_BATCH_NO$ARG_BOOK_NO$ARG_SNO$ARG_LOCATION_CODE$ARG_DOC_TYPE$ARG_FROM_NO$ARG_TO_NO$ARG_LOT_RECEIPT_DATE$ARG_USER_CODE$ARG_FROM_YEAR$ARG_TO_YEAR$ARG_CAF_MONTH$ARG_CREATED_DATE$ARG_NAME$ARG_TO_MONTH$ARG_FLAG";
            camparameter = Session["client_code"] + "$" + string.Empty + "$" + evsn_split[0].ToString().Trim() + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + evsn_split[0].ToString().Trim() + "$" + string.Empty + "$" + Session["usercode"].ToString() + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$15";
            camspcode = "CMS10";
            paramcount = 19;
            ws.Timeout = 9999999;
            ds.Clear();
            ds = ws.ExDataSetFirst(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString());
            ws.Dispose();

            //if (Session["Issuer"] == "G198")//Issuer
            //{
            if (ds.Tables[0].Rows.Count > 0)
            {
                txt_isin.Text = ds.Tables[0].Rows[0][0].ToString();
                txt_isin_name.Text = ds.Tables[0].Rows[0][1].ToString();
                if (ds.Tables[0].Rows[0][2].ToString() == "E")
                {
                    ddltype.Text = "Equity";
                }
                else if (ds.Tables[0].Rows[0][2].ToString() == "D")
                {
                    ddltype.Text = "Debenture";
                }
                else
                {
                    ddltype.Text = "Preference";
                }
                if (ds.Tables[0].Rows[0][3].ToString() == "G")
                {
                    drp_evsn_type.Text = "General Meeting";
                }
                else if (ds.Tables[0].Rows[0][3].ToString() == "P")
                {
                    drp_evsn_type.Text = "Postal Ballot";
                }
                else
                {
                    drp_evsn_type.Text = "Election Voting";
                }
                txt_Tot_Nof_Shares.Text = ds.Tables[0].Rows[0][4].ToString();
                txt_nom_val.Text = ds.Tables[0].Rows[0][5].ToString();
                txt_vot_rights.Text = ds.Tables[0].Rows[0][6].ToString();
                if (ds.Tables[0].Rows[0][7].ToString() == "L")
                {
                    Drp_Vot_rghts_rndoff.Text = "Lower";
                }
                else if (ds.Tables[0].Rows[0][7].ToString() == "H")
                {
                    Drp_Vot_rghts_rndoff.Text = "Higher";
                }
                else
                {
                    Drp_Vot_rghts_rndoff.Text = "Actual";
                }

                if (ds.Tables[0].Rows[0][8].ToString() == "F")
                {
                    Drp_Access_Via_Internet.Text = "Free";
                    txt_Ltd_IPaddr.Enabled = false;
                }
                else
                {
                    Drp_Access_Via_Internet.Text = "Limited";
                }
                if (ds.Tables[0].Rows[0][9].ToString() != "")
                {
                    txt_Ltd_IPaddr.Text = ds.Tables[0].Rows[0][9].ToString();
                }
                ddl_Rta.SelectedItem.Text = ds.Tables[0].Rows[0][10].ToString();
                ddl_Scrutinizer.SelectedItem.Text = ds.Tables[0].Rows[0][11].ToString();
                Txt_Scrutinzer_Access.Text = ds.Tables[0].Rows[0][12].ToString();
                if (ds.Tables[0].Rows[0][13].ToString() != "")
                {
                    if (ds.Tables[0].Rows[0][13].ToString() == "Y")
                    {
                        ddl_All_Ball_Status.SelectedIndex = 1;
                    }
                    else
                    {
                        ddl_All_Ball_Status.SelectedIndex = 2;
                    }
                }

                if (ds.Tables[0].Rows[0][14].ToString() != "")
                {
                    if (ds.Tables[0].Rows[0][14].ToString() == "Y")
                    {

                        ddl_Evsn_Appr_Status.SelectedIndex = 1;
                    }
                    else
                    {
                        ddl_Evsn_Appr_Status.SelectedIndex = 2;
                    }
                }
                else
                {
                    ddl_Evsn_Appr_Status.SelectedIndex = 2;
                }
                if (ds.Tables[0].Rows[0][27].ToString() != "")
                {
                    if (ds.Tables[0].Rows[0][27].ToString() == "Y")
                    {
                        Lbl_Rta_confm_status.Text = "Yes";
                        lbl_rta_remarks.ForeColor = Color.Green;
                        lbl_rta_remarks.Text = ds.Tables[0].Rows[0][29].ToString();
                        ddl_Disp_All_Infrm.SelectedItem.Text = "Yes";
                        remarks.Visible = true;
                        remark1.Visible = true;
                        txtremark.Text = ds.Tables[0].Rows[0][29].ToString();
                        txtremark.Enabled = false;
                        if (Session["Issuer"] == "G198")
                        {
                            txt_isin.Enabled = false;
                            ddl_isin_det.Enabled = true;
                            txt_isin_name.Enabled = false;
                            ddltype.Enabled = false;
                            drp_evsn_type.Enabled = false;
                            txt_Tot_Nof_Shares.Enabled = false;
                            txt_nom_val.Enabled = false;
                            txt_vot_rights.Enabled = false;
                            Drp_Vot_rghts_rndoff.Enabled = false;
                            Drp_Access_Via_Internet.Enabled = false;
                            txt_Ltd_IPaddr.Enabled = false;
                            ddl_Rta.Enabled = false;
                            ddl_Scrutinizer.Enabled = false;
                            Txt_Scrutinzer_Access.Enabled = false;
                            ddl_All_Ball_Status.Enabled = false;
                            DropDownAbstain_vote.Enabled = false;
                            txt_hold_date.Enabled = false;
                            FileUpload1.Enabled = false;
                            btnSubmit.Enabled = true;
                            // ddl_Evsn_Appr_Status.SelectedIndex = 0;
                            ddl_Evsn_Appr_Status.Enabled = true;
                        }
                    }
                    else if (ds.Tables[0].Rows[0][27].ToString() == "N")
                    {
                        ddl_Disp_All_Infrm.SelectedItem.Text = "No";
                        Lbl_Rta_confm_status.Text = "No";
                        lbl_rta_remarks.ForeColor = Color.Red;
                        lbl_rta_remarks.Text = ds.Tables[0].Rows[0][29].ToString();
                        txtremark.Text = ds.Tables[0].Rows[0][29].ToString();
                    }
                    else
                    {
                        Lbl_Rta_confm_status.Text = "No";
                    }
                }
                if (ds.Tables[0].Rows[0][28].ToString() != "")
                {
                    if (ds.Tables[0].Rows[0][28].ToString() == "Y")
                    {
                        DropDownAbstain_vote.SelectedIndex = 1;
                    }
                    else
                    {
                        DropDownAbstain_vote.SelectedIndex = 2;
                    }
                    DropDownAbstain_vote.Enabled = false;
                }

                if (Session["Issuer"] == "G198" || Session["RTA"] == "G199" || Session["EVRTA"] == "G200" || Session["SCRUTINIZER"] == "G201")
                {
                    if (ds.Tables[0].Rows[0][24].ToString() != "")
                    {

                        txt_hold_date.Text = ds.Tables[0].Rows[0][24].ToString();
                        // ddl_hold_date_hrs.SelectedItem.Text = ds.Tables[0].Rows[0][24].ToString().Split(' ')[1].Split(':')[0];
                        // ddl_hold_date_Mi.SelectedItem.Text = ds.Tables[0].Rows[0][24].ToString().Split(' ')[1].Split(':')[1];
                    }
                    if (ds.Tables[0].Rows[0][25] != "")
                    {
                        byte[] blob1 = (byte[])ds.Tables[0].Rows[0][25];

                        if (blob1.Length > 1)
                        {
                            UploadFilepath = Server.MapPath("~/uploads/temp_img/" + ds.Tables[0].Rows[0][26].ToString());
                            Session["Uplaod_File"] = UploadFilepath;
                            if (File.Exists(UploadFilepath) == false)
                            {
                                try
                                {
                                    FileStream FS = new FileStream(UploadFilepath, FileMode.Append);
                                }
                                catch
                                {

                                }
                            }
                            byte[] blob = (byte[])ds.Tables[0].Rows[0][25];

                            if (blob.Length > 0)
                            {
                                //FS.Write(blob, 0, blob.Length);
                                //FS.Close();
                                //if (File.Exists(Path.Combine(Server.MapPath("~/uploads/temp_img/"), Convert.ToString(ds.Tables[0].Rows[0][26]))) == false)
                                //{

                                try
                                {
                                    if (File.Exists(Path.Combine(Server.MapPath("~/uploads/temp_img/"), Convert.ToString(ds.Tables[0].Rows[0][26]))))
                                    {
                                        File.Delete(Path.Combine(Server.MapPath("~/uploads/temp_img/"), Convert.ToString(ds.Tables[0].Rows[0][26])));
                                    }



                                    using (FileStream fs = new FileStream(Path.Combine(Server.MapPath("~/uploads/temp_img/"), Convert.ToString(ds.Tables[0].Rows[0][26])), FileMode.Append, FileAccess.Write))
                                    {
                                        fs.Write(blob, 0, (int)blob.Length);
                                        fs.Close();
                                    }
                                    //}
                                }
                                catch
                                {

                                }

                                //File.WriteAllBytes(UploadFilepath, blob);
                            }

                            if (File.Exists(UploadFilepath))
                            {
                                Fileupload.Visible = true;
                                Fileupload.Text = ds.Tables[0].Rows[0][26].ToString();// "~/uploads/temp_img/" +
                            }

                        }
                    }
                }

                if (Session["RTA"] == "G199" || Session["EVRTA"] == "G200" || Session["SCRUTINIZER"] == "G201" || Session["Issuer"] == "G198" && ds.Tables[0].Rows[0][27].ToString() == "Y")
                {
                    if (ds.Tables[0].Rows[0][15] != "")
                    {
                        byte[] blobRes_File = (byte[])ds.Tables[0].Rows[0][15];
                        if (blobRes_File.Length > 1)
                        {
                            string pathres = "";
                            fulPath = Server.MapPath("~/uploads/temp_img/" + ds.Tables[0].Rows[0][16].ToString());
                            Session["Res_File_Path"] = fulPath;
                            //FileStream FS = new FileStream(fulPath, FileMode.Create);
                            byte[] blob = (byte[])ds.Tables[0].Rows[0][15];

                            if (blob.Length > 0)
                            {
                                try
                                {
                                    if (File.Exists(Path.Combine(Server.MapPath("~/uploads/temp_img/"), Convert.ToString(ds.Tables[0].Rows[0][16]))))
                                    {
                                        File.Delete(Path.Combine(Server.MapPath("~/uploads/temp_img/"), Convert.ToString(ds.Tables[0].Rows[0][16])));
                                    }
                                    using (FileStream fs = new FileStream(Path.Combine(Server.MapPath("~/uploads/temp_img/"), Convert.ToString(ds.Tables[0].Rows[0][16])), FileMode.CreateNew, FileAccess.Write))
                                    {
                                        fs.Write(blob, 0, (int)blob.Length);
                                        fs.Close();
                                    }
                                }
                                catch
                                {

                                }

                            }

                            if (File.Exists(fulPath))
                            {
                                Res_File.Visible = true;
                                Res_File.Text = ds.Tables[0].Rows[0][16].ToString();//"~/uploads/temp_img/" + 
                                HRes_File.Value = Path.Combine(Server.MapPath("~/uploads/temp_img/"), Convert.ToString(ds.Tables[0].Rows[0][16]));
                            }
                            else
                            {

                            }
                        }
                    }

                    if (ds.Tables[0].Rows[0][17].ToString() != "")
                    {
                        //txt_Exist_Not_Filename.Text = ds.Tables[0].Rows[0][17].ToString();
                    }
                    byte[] blobLogo_File = (byte[])ds.Tables[0].Rows[0][18];
                    if (blobLogo_File.Length > 1)
                    {

                        LogofullPath = Server.MapPath("~/uploads/temp_img/" + ds.Tables[0].Rows[0][19].ToString());
                        Session["Logo_File_Path"] = LogofullPath;
                        //FileStream FS = new FileStream(LogofullPath, FileMode.Create);
                        byte[] blob = (byte[])ds.Tables[0].Rows[0][18];

                        if (blob.Length > 0)
                        {
                            try
                            {
                                if (File.Exists(Path.Combine(Server.MapPath("~/uploads/temp_img/"), Convert.ToString(ds.Tables[0].Rows[0][19]))))
                                {
                                    File.Delete(Path.Combine(Server.MapPath("~/uploads/temp_img/"), Convert.ToString(ds.Tables[0].Rows[0][19])));
                                }

                                using (FileStream fs = new FileStream(Path.Combine(Server.MapPath("~/uploads/temp_img/"), Convert.ToString(ds.Tables[0].Rows[0][19])), FileMode.Append, FileAccess.Write))
                                {
                                    fs.Write(blob, 0, (int)blob.Length);
                                    fs.Close();
                                }
                            }
                            catch
                            {

                            }


                        }

                        if (File.Exists(LogofullPath))
                        {
                            Logo_File.Visible = true;
                            Logo_File.Text = ds.Tables[0].Rows[0][19].ToString();// "~/uploads/temp_img/" +
                            HLogo_File.Value = Path.Combine(Server.MapPath("~/uploads/temp_img/"), Convert.ToString(ds.Tables[0].Rows[0][19]));
                        }
                    }
                    if (ds.Tables[0].Rows[0][20].ToString() != "")
                    {
                        Txt_Vot_Start_Time.Text = ds.Tables[0].Rows[0][20].ToString();
                        //Txt_Vot_Start_Time.Text = ds.Tables[0].Rows[0][20].ToString().Split(' ')[0];
                        // ddl_Vot_Start_Hours.SelectedItem.Text = ds.Tables[0].Rows[0][20].ToString().Split(' ')[1].Split(':')[0];
                        // ddl_Vot_Start_Minutes.SelectedItem.Text = ds.Tables[0].Rows[0][20].ToString().Split(' ')[1].Split(':')[1];
                    }
                    if (ds.Tables[0].Rows[0][21].ToString() != "")
                    {
                        Txt_Vot_End_Time.Text = ds.Tables[0].Rows[0][21].ToString();
                        //Txt_Vot_End_Time.Text = ds.Tables[0].Rows[0][21].ToString().Split(' ')[0];
                        //ddl_Vot_End_Time_hrs.SelectedItem.Text = ds.Tables[0].Rows[0][21].ToString().Split(' ')[1].Split(':')[0];
                        // ddl_Vot_End_Time_Minutes.SelectedItem.Text = ds.Tables[0].Rows[0][21].ToString().Split(' ')[1].Split(':')[1];

                    }
                    if (ds.Tables[0].Rows[0][22].ToString() != "")
                    {
                        Txt_Meet_Start_Date_Time.Text = ds.Tables[0].Rows[0][22].ToString();
                        //Txt_Meet_Start_Date_Time.Text = ds.Tables[0].Rows[0][22].ToString().Split(' ')[0];
                        //ddl_Meet_Start_Date_Time_Hrs.SelectedItem.Text = ds.Tables[0].Rows[0][22].ToString().Split(' ')[1].Split(':')[0];
                        //ddl_Meet_Start_Date_Time_Mi.SelectedItem.Text = ds.Tables[0].Rows[0][22].ToString().Split(' ')[1].Split(':')[1]; ;

                    }
                    if (ds.Tables[0].Rows[0][27].ToString() != "")
                    {
                        if (ds.Tables[0].Rows[0][27].ToString() == "Y")
                        {
                            Lbl_Rta_confm_status.Text = "Yes";
                        }
                        else
                        {
                            Lbl_Rta_confm_status.Text = "No";
                        }

                    }
                    if (ds.Tables[0].Rows[0][28].ToString() != "")
                    {
                        if (ds.Tables[0].Rows[0][28].ToString() == "Y")
                        {
                            DropDownAbstain_vote.SelectedItem.Text = "Yes";
                        }
                        else
                        {
                            DropDownAbstain_vote.SelectedItem.Text = "No";
                        }
                        DropDownAbstain_vote.Enabled = false;
                    }

                    rta_approval();
                }

                if (Session["Issuer"] == "G198")//Issuer
                {
                    CollapsiblePanelExtender11.Collapsed = true;
                    this.CollapsiblePanelExtender11.ClientState = "true";

                    txtCaptcha.Visible = false;
                    Image1.Visible = false;
                    btn_refresh.Visible = false;
                    Btnadd.Enabled = false;
                    BtnDel.Enabled = false;
                    BunDelete.Enabled = false;
                    BtnNew.Visible = false;
                    btnSubmit.Enabled = true;
                    txt_isin.Focus();
                    return;
                }

                else if (Session["RTA"] == "G199")//RTA
                {
                    this.CollapsiblePanelExt_per.Collapsed = false;
                    this.CollapsiblePanelExt_per.ClientState = "false";
                    CollapsiblePanelExtender11.Collapsed = true;
                    this.CollapsiblePanelExtender11.ClientState = "true";
                    CollapsiblePanelExtender2.Collapsed = true;
                    this.CollapsiblePanelExtender2.ClientState = "true";
                    txt_resno.Enabled = true;
                    txtCaptcha.Visible = false;
                    Image1.Visible = false;
                    btn_refresh.Visible = false;
                    BtnNew.Visible = false;
                    btnSubmit.Enabled = true;
                    FileResUpload.Focus();
                    return;
                }
                else if (Session["EVRTA"] == "G200")//RTA APPROVAL
                {
                    
                string []ddl_evsn_agm = ddl_isin_det.SelectedItem.Text.ToString().Trim().Split('-');

                camparamname = "ARG_CLIENT_CODE$ARG_COMPANY_CODE$ARG_LOT_CODE$ARG_BATCH_NO$ARG_BOOK_NO$ARG_SNO$ARG_LOCATION_CODE$ARG_DOC_TYPE$ARG_FROM_NO$ARG_TO_NO$ARG_LOT_RECEIPT_DATE$ARG_USER_CODE$ARG_FROM_YEAR$ARG_TO_YEAR$ARG_CAF_MONTH$ARG_CREATED_DATE$ARG_NAME$ARG_TO_MONTH$ARG_FLAG";
                camparameter = Session["client_code"] + "$" + "" + "$" + ddl_Disp_All_Infrm.Text.ToString().Substring(0, 1).ToUpper() + "$" + ddl_evsn_agm[0].ToString().Trim() + "$" + "" + "$" + "" + "$" + "" + "$" + txtremark.Text.Trim() + "$" + "" + "$" + "" + "$" + "" + "$" + Session["usercode"].ToString() + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$" + "" + "$18";
                camspcode = "CMS10";
                paramcount = 19;
                ws.Timeout = 9999999;
                ds = ws.ExDataSetFirst(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString());
                ws.Dispose();

                if (ds.Tables[0].Columns[0].ColumnName.ToString() == "WARNING")//ds.Tables[0].Rows[0][0].ToString()
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Rom Upload Not Tallied / Not Loaded.";
                    txtremark.Text = "Rom Upload Not Tallied / Not Loaded.";
                    ddl_Disp_All_Infrm.SelectedItem.Text = "No";
                }
                    this.CollapsiblePanelExt_per.Collapsed = false;
                    this.CollapsiblePanelExt_per.ClientState = "false";
                    CollapsiblePanelExtender11.Collapsed = true;
                    this.CollapsiblePanelExtender11.ClientState = "true";
                    CollapsiblePanelExtender2.Collapsed = true;
                    this.CollapsiblePanelExtender2.ClientState = "true";
                    //this.CollapsiblePanelExtender11.Collapsed = true;
                    //this.CollapsiblePanelExtender11.ClientState = "true";
                    //CollapsiblePanelExtender2.Collapsed = true;
                    //this.CollapsiblePanelExtender2.ClientState = "true";
                    //CollapsiblePanelExt_per.Collapsed = false;
                    //CollapsiblePanelExt_per.ClientState = "false";
                    ddl_Disp_All_Infrm.Enabled = true;
                    FileResUpload.Enabled = false;
                    FileLogoUpload.Enabled = false;
                    BtnDel.Enabled = false;
                    BunDelete.Enabled = false;
                    btnSubmit.Enabled = true;
                    Change_Captcha();
                    txtCaptcha.Enabled = true;
                    Image1.Enabled = true;
                    btn_refresh.Visible = true;
                    BtnNew.Visible = false;
                    Btnadd.Enabled = false;
                    ddl_Disp_All_Infrm.Focus();
                    return;

                }
                else if (Session["SCRUTINIZER"] == "G201")//EV SCRUTINIZER
                {
                    ddl_Disp_All_Infrm.Focus();
                    txtCaptcha.Enabled = false;
                    Image1.Enabled = false;
                    btn_refresh.Visible = false;
                    BtnNew.Visible = false;
                    return;
                }
                else
                {

                }
            }
            else
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "No Records Found";
                return;
            }
            //}

        }

        catch (Exception EX)
        {
            lblErrMsg.Visible = true;
            lblErrMsg.Text = EX.Message.ToString();
            return;
        }

    }
    private void rta_approval()
    {
        try
        {
            lblErrMsg.Text = "";
            lblMsg.Text = "";
            Txt_Res_Desc.Text = "";
            //Session["Res_File_Path"] = "";
            ViewState["row"] = "";
            string fulPath = "";
            string LogofullPath = "";
            string profile_fullpath = "";
            string Upload_fullpath = "";
            string upload_path_details = "";
            string UploadFilepath = "";
            string profile_path_details = "";
            GridView1.DataSource = null;
            GridView1.DataBind();

            string[] evsn_split;
            evsn_split = ddl_isin_det.Text.Split('-');

            camparamname = "ARG_CLIENT_CODE$ARG_COMPANY_CODE$ARG_LOT_CODE$ARG_BATCH_NO$ARG_BOOK_NO$ARG_SNO$ARG_LOCATION_CODE$ARG_DOC_TYPE$ARG_FROM_NO$ARG_TO_NO$ARG_LOT_RECEIPT_DATE$ARG_USER_CODE$ARG_FROM_YEAR$ARG_TO_YEAR$ARG_CAF_MONTH$ARG_CREATED_DATE$ARG_NAME$ARG_TO_MONTH$ARG_FLAG";
            camparameter = Session["client_code"] + "$" + string.Empty + "$" + string.Empty + "$" + evsn_split[0].ToString().Trim() + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + evsn_split[0].ToString().Trim() + "$" + string.Empty + "$" + Session["usercode"].ToString() + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$19";
            camspcode = "CMS10";
            paramcount = 19;
            ws.Timeout = 9999999;
            ds.Clear();
            ds = ws.ExDataSetFirst(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString());
            ws.Dispose();

            if (ds.Tables[0].Rows.Count > 0)
            {
                dt.Columns.Add("Sno", typeof(System.Int32));
                dt.Columns.Add("Resolution", typeof(System.String));
                dt.Columns.Add("Profile File", typeof(System.String));
                dt.Columns.Add("Upload", typeof(System.String));
                dt.Columns.Add("HiddenPhoto", typeof(System.String));
                dt.Columns.Add("HiddenUpload", typeof(System.String));
                dt.Columns.Add("Res_ID", typeof(System.String));
                DataRow dr = null;
                //dt = ds.Tables[0];
                ViewState["row"] = null;

                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    profile_fullpath = "";
                    profile_path_details = "";
                    Upload_fullpath = "";
                    upload_path_details = "";
                    byte[] Profile_path = (byte[])ds.Tables[0].Rows[i][2];
                    if (Profile_path.Length > 1)
                    {
                        if (ds.Tables[0].Rows[i][4].ToString() != ".")
                            profile_fullpath = Server.MapPath("~/uploads/temp_img/" + ds.Tables[0].Rows[i][4].ToString());
                        //Session["Logo_File_Path"] = profile_fullpath;
                        //FileStream FS = new FileStream(profile_fullpath, FileMode.Create);
                        byte[] blob = (byte[])ds.Tables[0].Rows[i][2];

                        if (blob.Length != 64)
                        {
                            if (File.Exists(Path.Combine(Server.MapPath("~/uploads/temp_img/"), Convert.ToString(ds.Tables[0].Rows[i][4]))))
                            {
                                File.Delete(Path.Combine(Server.MapPath("~/uploads/temp_img/"), Convert.ToString(ds.Tables[0].Rows[i][4])));
                            }
                            using (FileStream fs = new FileStream(Path.Combine(Server.MapPath("~/uploads/temp_img/"), Convert.ToString(ds.Tables[0].Rows[i][4])), FileMode.CreateNew, FileAccess.Write))
                            {
                                fs.Write(blob, 0, (int)blob.Length);
                                fs.Close();
                            }

                        }

                        if (File.Exists(profile_fullpath))
                        {
                            profile_path_details = profile_fullpath;
                        }
                    }

                    byte[] Upload_path_det = (byte[])ds.Tables[0].Rows[i][3];
                    if (Upload_path_det.Length > 1)
                    {
                        if (ds.Tables[0].Rows[i][5].ToString() != ".")
                            Upload_fullpath = Server.MapPath("~/uploads/temp_img/" + ds.Tables[0].Rows[i][5].ToString());
                        //Session["Logo_File_Path"] = profile_fullpath;
                        //FileStream FS = new FileStream(Upload_fullpath, FileMode.Create);
                        byte[] blob1 = (byte[])ds.Tables[0].Rows[i][3];

                        if (blob1.Length != 64)
                        {
                            if (File.Exists(Path.Combine(Server.MapPath("~/uploads/temp_img/"), Convert.ToString(ds.Tables[0].Rows[i][5]))))
                            {
                                File.Delete(Path.Combine(Server.MapPath("~/uploads/temp_img/"), Convert.ToString(ds.Tables[0].Rows[i][5])));
                            }
                            using (FileStream fs = new FileStream(Path.Combine(Server.MapPath("~/uploads/temp_img/"), Convert.ToString(ds.Tables[0].Rows[i][5])), FileMode.CreateNew, FileAccess.Write))
                            {
                                fs.Write(blob1, 0, (int)blob1.Length);
                                fs.Close();
                            }

                        }

                        if (File.Exists(Upload_fullpath))
                        {
                            upload_path_details = Upload_fullpath;
                        }
                    }

                    dr = dt.NewRow();
                    dr["Sno"] = ds.Tables[0].Rows[i][0].ToString();//"Sno"
                    dr["Resolution"] = ds.Tables[0].Rows[i][1].ToString();//"Resolution"
                    dr["Profile File"] = profile_path_details;//"Profile"
                    dr["Upload"] = upload_path_details;//"Upload"
                    dr["HiddenPhoto"] = profile_path_details;//"Upload"
                    dr["HiddenUpload"] = upload_path_details;//"Upload"
                    dr["Res_ID"] = ds.Tables[0].Rows[i][6].ToString();
                    dt.Rows.Add(dr);
                    ViewState["row"] = dt;
                    GridView1.DataSource = ViewState["row"];
                    GridView1.Columns[4].Visible = false;//Hidden Photo Desc
                    GridView1.Columns[5].Visible = false;//Hidden Upload Desc
                    GridView1.Columns[6].Visible = false;//Res_id
                    GridView1.Columns[7].Visible = false;//Delete
                    GridView1.Columns[8].Visible = true;//Edit
                    txt_resno.Enabled = false;
                    BunDelete.Visible = true;
                    BtnDel.Visible = true;
                    Btnadd.Enabled = true;
                    btnSubmit.Enabled = false;
                    GridView1.DataBind();
                    color_bind();
                }
                Txt_No_of_Res.Text = ds.Tables[0].Rows[0][7].ToString();
            }
            else
            {
                GridView1.Columns[4].Visible = false;//Hidden Photo Desc
                GridView1.Columns[5].Visible = false;//Hidden Upload Desc
                GridView1.Columns[6].Visible = false;//Res_id
                GridView1.Columns[7].Visible = false;//Delete
                GridView1.Columns[8].Visible = true;//Edit

                BunDelete.Visible = false;
                BtnDel.Visible = false;
                Btnadd.Enabled = true;
                btnSubmit.Enabled = true;
                this.CollapsiblePanelExtender11.Collapsed = true;
                this.CollapsiblePanelExtender11.ClientState = "true";
                CollapsiblePanelExtender2.Collapsed = true;
                this.CollapsiblePanelExtender2.ClientState = "true";
                CollapsiblePanelExt_per.Collapsed = false;
                CollapsiblePanelExt_per.ClientState = "false";
                Txt_No_of_Res.Focus();
                //SetFocus(Txt_No_of_Res.Text);                     
                return;
            }
        }
        catch (Exception EX)
        {
            lblErrMsg.Visible = true;
            lblErrMsg.Text = EX.Message.ToString();
            return;
        }

    }
    public byte[] byteTobyte(byte[] byteArrayIn)
    {
        using (MemoryStream _msIN = new MemoryStream(byteArrayIn))
        {
            System.Drawing.Image cImage = System.Drawing.Image.FromStream(_msIN);

            using (MemoryStream _msOUT = new MemoryStream())
            {
                cImage.Save(_msOUT, System.Drawing.Imaging.ImageFormat.Jpeg);

                return _msOUT.ToArray();
            }
        }
    }
    protected void Res_File_Click(object sender, EventArgs e)
    {
        try
        {
            lblErrMsg.Visible = false;
            string filename = string.Empty;
            string filename2 = Session["Res_File_Path"].ToString();

            filename = Path.GetFileName(filename2);
            if (File.Exists(filename2) == true)
            {
                HttpContext.Current.Response.ContentType = "APPLICATION/OCTET-STREAM";
                String Header = "Attachment; Filename=" + filename;
                HttpContext.Current.Response.AppendHeader("Content-Disposition", Header);
                System.IO.FileInfo Dfile = new System.IO.FileInfo(filename2);
                HttpContext.Current.Response.WriteFile(Dfile.FullName);
                HttpContext.Current.Response.End();
            }


            else
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "No files found ";
                lblErrMsg.ForeColor = System.Drawing.Color.Red;
            }
        }

        catch (Exception EX)
        {
            lblErrMsg.Visible = true;
            lblErrMsg.Text = EX.Message.ToString();
            return;
        }

    }
    protected void Logo_File_Click(object sender, EventArgs e)
    {
        try
        {
            lblErrMsg.Visible = false;
            string filename = string.Empty;
            string filename2 = Session["Logo_File_Path"].ToString();

            filename = Path.GetFileName(filename2);
            if (File.Exists(filename2) == true)
            {
                HttpContext.Current.Response.ContentType = "APPLICATION/OCTET-STREAM";
                String Header = "Attachment; Filename=" + filename;
                HttpContext.Current.Response.AppendHeader("Content-Disposition", Header);
                System.IO.FileInfo Dfile = new System.IO.FileInfo(filename2);
                HttpContext.Current.Response.WriteFile(Dfile.FullName);
                HttpContext.Current.Response.End();
            }


            else
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "No files found ";
                lblErrMsg.ForeColor = System.Drawing.Color.Red;
            }
        }

        catch (Exception EX)
        {
            lblErrMsg.Visible = true;
            lblErrMsg.Text = EX.Message.ToString();
            return;
        }
    }
    protected void Fileupload_Click(object sender, EventArgs e)
    {
        try
        {
            lblErrMsg.Visible = false;
            string filename = string.Empty;
            string filename2 = Session["Uplaod_File"].ToString();

            filename = Path.GetFileName(filename2);
            if (File.Exists(filename2) == true)
            {
                HttpContext.Current.Response.ContentType = "APPLICATION/OCTET-STREAM";
                String Header = "Attachment; Filename=" + filename;
                HttpContext.Current.Response.AppendHeader("Content-Disposition", Header);
                System.IO.FileInfo Dfile = new System.IO.FileInfo(filename2);
                HttpContext.Current.Response.WriteFile(Dfile.FullName);
                HttpContext.Current.Response.End();
            }


            else
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "No files found ";
                lblErrMsg.ForeColor = System.Drawing.Color.Red;
            }

        }
        catch (Exception EX)
        {
            lblErrMsg.Visible = true;
            lblErrMsg.Text = EX.Message.ToString();
            return;
        }

    }
    protected void BtnNew_Click(object sender, EventArgs e)
    {
        try
        {
            if (Session["Issuer"] == "G198")
            {
                lblErrMsg.Visible = false;
                lblErrMsg.Text = "";
                lblMsg.Text = "";
                txt_isin.Text = "";
                ddl_isin_det.SelectedIndex = 0;
                txt_isin_name.Text = "";
                ddltype.SelectedIndex = 0;
                drp_evsn_type.SelectedIndex = 0;
                txt_Tot_Nof_Shares.Text = "";
                txt_nom_val.Text = "";
                txt_vot_rights.Text = "";
                Drp_Vot_rghts_rndoff.SelectedIndex = 0;
                Drp_Access_Via_Internet.SelectedIndex = 0;
                txt_Ltd_IPaddr.Text = "";
                ddl_Rta.SelectedIndex = 0;
                ddl_Scrutinizer.SelectedIndex = 0;
                Txt_Scrutinzer_Access.Text = "";
                ddl_All_Ball_Status.SelectedIndex = 0;
                ddl_Evsn_Appr_Status.SelectedIndex = 0;
                // txt_Dply_Sru_conf_Status.Text = "NO";
                ddl_Evsn_Appr_Status.SelectedIndex = 2;
                ddl_Evsn_Appr_Status.Enabled = false;
                DropDownAbstain_vote.SelectedIndex = 0;
                // txt_Dply_Sru_conf_Status.Enabled = false;
                Lbl_Rta_confm_status.Text = "NO";
                Lbl_Rta_confm_status.Enabled = false;
                Fileupload.Visible = false;
                txt_hold_date.Text = "";
                //ddl_hold_date_hrs.Items.Clear();
                // ddl_hold_date_Mi.Items.Clear();
                // Hours_Load(ddl_hold_date_hrs);
                // Minutes_Load(ddl_hold_date_Mi);
                txt_isin.Focus();
            }

        }

        catch (Exception EX)
        {
            lblErrMsg.Visible = true;
            lblErrMsg.Text = EX.Message.ToString();
            return;
        }
    }
    protected void Drp_Access_Via_Internet_SelectedIndexChanged(object sender, EventArgs e)
    {
        lblErrMsg.Visible = false;
        lblErrMsg.Text = "";
        lblMsg.Text = "";

        try
        {
            if (Drp_Access_Via_Internet.SelectedItem.Text == "Free")
            {
                txt_Ltd_IPaddr.Enabled = false;
                ddl_Rta.Focus();
            }
            else
            {
                txt_Ltd_IPaddr.Enabled = true;
                txt_Ltd_IPaddr.Focus();
            }

        }
        catch (Exception EX)
        {
            lblErrMsg.Visible = true;
            lblErrMsg.Text = EX.Message.ToString();
            return;
        }
    }

    protected void BtnDel_Click(object sender, EventArgs e)
    {
        lblErrMsg.Visible = false;
        lblMsg.Visible = false;
        lblErrMsg.Text = "";
        lblMsg.Text = "";
        Filepath = "";
        Uplodpath = "";
        FilePro_File = FilePro_File1.PostedFile;
        Upload_Photo = Upload_Photo1.PostedFile;
        DataTable updatedt = (DataTable)ViewState["row"];
        try
        {

            if (Txt_Res_Desc.Text == "")
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "Kindly Click on Edit Option in below details";
                Txt_Res_Desc.Focus();
                return;
            }

            if (Txt_No_of_Res.Text.Trim() == "")
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "Kindly Click on Edit Option in below details";
                Txt_No_of_Res.Focus();
                return;
            }

            if (FilePro_File.FileName != "" || Upload_Photo.FileName != "")
            {
                if (FilePro_File.FileName == Upload_Photo.FileName)
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Profile & Photo should not be same.";
                    return;
                }
            }

            string[] ddl_evsn_agm;
            byte[] P_Blob_image1 = new Byte[64];
            byte[] P_Blob_image2 = new Byte[64];
            byte[] P_Blob_image3 = new Byte[64];
            byte[] P_Blob_image4 = new Byte[64];
            byte[] P_Blob_image5 = new Byte[64];
            byte[] P_Blob_image6 = new Byte[64];
            string[] FName;
            string UPpath = "";
            string Fpath = "";
            ddl_evsn_agm = ddl_isin_det.SelectedItem.Text.ToString().Trim().Split('-');

            if (FilePro_File.FileName != "")
            {

                FName = FilePro_File.FileName.Split('.');
                Fpath = FName[0] + GetDateTime() + "." + FName[1];

                Fileprofile = Path.GetFileName(Fpath);
                Filepath = Server.MapPath("../uploads/" + Convert.ToString(Session["FolderName"]) + Fileprofile);// + Session["ID"]
                int fileSize = (FilePro_File.ContentLength / 1024) / 1024;

                if (!Directory.Exists(Server.MapPath("../uploads/" + Convert.ToString(Session["FolderName"]))))
                {
                    Directory.CreateDirectory(Server.MapPath("../uploads/" + Convert.ToString(Session["FolderName"])));
                }

                if (fileSize > 2)// Allow only files less than 2,100,000 bytes (approximately 2 MB) to be uploaded.
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Profile File Images Should Less than 2 MB size limit.";
                    FilePro_File1.Focus();
                    return;
                }

                FilePro_File.SaveAs(Filepath);
                P_Blob_image1 = ReadFile(Filepath);
            }

            if (Upload_Photo.FileName != "")
            {

                FName = Upload_Photo.FileName.Split('.'); ;
                UPpath = FName[0] + GetDateTime() + "." + FName[1]; ;
                Uploadphoto = Path.GetFileName(UPpath);
                Uplodpath = Server.MapPath("../uploads/" + Convert.ToString(Session["FolderName"]) + Uploadphoto);// + Session["ID"]               
                int Upload_img_Size = (Upload_Photo.ContentLength / 1024) / 1024;


                if (!Directory.Exists(Server.MapPath("../uploads/" + Convert.ToString(Session["FolderName"]))))
                {

                    Directory.CreateDirectory(Server.MapPath("../uploads/" + Convert.ToString(Session["FolderName"])));
                }


                if (Upload_img_Size > 2)// Allow only files less than 2,100,000 bytes (approximately 2 MB) to be uploaded.
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Uplaod File Images Should Less than 2 MB size limit.";
                    Upload_Photo1.Focus();
                    return;
                }

                Upload_Photo.SaveAs(Uplodpath);
                P_Blob_image2 = ReadFile(Uplodpath);
            }

            int resno = 0;

            resno = Convert.ToInt32(txt_resno.Text.Trim());
            //  res = Txt_Res_Desc.Text.Trim().Replace("&", "and");

            for (int i = 0; i < updatedt.Rows.Count; i++)
            {
                if (Convert.ToInt32(updatedt.Rows[i]["Sno"]) == resno)
                {
                    updatedt.Rows[i]["Resolution"] = Txt_Res_Desc.Text.Trim().Replace("&", "and ");
                    if (updatedt.Rows[i]["Profile File"].ToString() == "")
                    {
                        updatedt.Rows[i]["Profile File"] = Filepath;
                    }
                    else if (Path.GetFileName(updatedt.Rows[i]["Profile File"].ToString()) != Path.GetFileName(Filepath))
                    {
                        if (Filepath != "")
                        {
                            updatedt.Rows[i]["Profile File"] = Filepath;
                        }

                        else
                        {
                            updatedt.Rows[i]["Profile File"] = Filepath;
                        }
                    }


                    if (updatedt.Rows[i]["Upload"].ToString() == "")
                    {
                        updatedt.Rows[i]["Upload"] = Uplodpath;
                    }
                    else if (Path.GetFileName(updatedt.Rows[i]["Upload"].ToString()) != Path.GetFileName(Uplodpath))
                    {
                        if (Uplodpath.ToString() != "")
                        {
                            updatedt.Rows[i]["Upload"] = Uplodpath;
                        }
                        else
                        {
                            updatedt.Rows[i]["Upload"] = Uplodpath;
                        }
                    }


                    updatedt.Rows[i]["HiddenPhoto"] = Filepath;
                    updatedt.Rows[i]["HiddenUpload"] = Uplodpath;
                }
            }

            for (int i = 0; i <= dt.Rows.Count - 1; i++)
            {
                if (dt.Rows[i][2].ToString() != "" && dt.Rows[i][3].ToString() != "")
                {
                    if (Fpath != "" && dt.Rows[i][2].ToString().ToString().Substring(0, 5) != "")
                    {
                        if (Path.GetFileName(Fpath).ToString().Substring(0, 5) == Path.GetFileName(dt.Rows[i][2].ToString()).ToString().Substring(0, 5))
                        {
                            lblErrMsg.Visible = true;
                            lblErrMsg.Text = "SNO " + dt.Rows[i][0].ToString() + "  and  " + txt_resno.Text.Trim() + " Profile File Images Same please change.  ";
                            Upload_Photo1.Focus();
                            return;

                        }
                    }
                    if (UPpath != "" && dt.Rows[i][3].ToString().ToString().Substring(0, 5) != "")
                    {
                        if (Path.GetFileName(UPpath).ToString().Substring(0, 5) == Path.GetFileName(dt.Rows[i][3].ToString()).ToString().Substring(0, 5))
                        {
                            lblErrMsg.Visible = true;
                            lblErrMsg.Text = "SNO " + dt.Rows[i][0].ToString() + "  and  " + txt_resno.Text.Trim() + " Upload Photo Images Same please change.  ";
                            Upload_Photo1.Focus();
                            return;

                        }
                    }
                }
            }


            DataView dv = updatedt.DefaultView;
            dv.Sort = "Sno asc";
            DataTable sortedDT1 = dv.ToTable();
           
            ViewState["row"] = sortedDT1;
            GridView1.Visible = true;
            GridView1.DataSource = ViewState["row"];
            GridView1.DataBind();
            //color_bind1();
            foreach (GridViewRow row in GridView1.Rows)
            {
                string profile = sortedDT1.Rows[row.RowIndex][2].ToString();
                string Upload = sortedDT1.Rows[row.RowIndex][3].ToString();
                row.Cells[2].ForeColor = Color.Empty;
                row.Cells[3].ForeColor = Color.Empty;

                if (profile == "")
                {

                    row.Cells[2].ForeColor = Color.Maroon;
                }
                if (Upload == "")
                {
                    row.Cells[3].ForeColor = Color.Maroon;
                }
            }
            lblMsg.Visible = true;
            Txt_No_of_Res.Enabled = false;
            //txt_resno.Text = "";
            lblMsg.Text = "Updated Successfully. EVSN ID Is : - " + ddl_evsn_agm[0].ToString().Trim();
            if (Txt_No_of_Res.Text == GridView1.Rows.Count.ToString())
            {
                btnSubmit.Enabled = true;
            }

        }
        catch (Exception ex)
        {
            lblErrMsg.Visible = true;
            lblErrMsg.Text = ex.Message.ToString();
            return;
        }
    }

    private void color_bind1()
    {
        foreach (GridViewRow row in GridView1.Rows)
        {
            //string profile = sortedDT.Rows[row.RowIndex][2].ToString();
            //string Upload = sortedDT.Rows[row.RowIndex][3].ToString();
            row.Cells[2].ForeColor = Color.Empty;
            row.Cells[3].ForeColor = Color.Empty;

            //if (profile == "")
            //{

            //    row.Cells[2].ForeColor = Color.Maroon;
            //}
            //if (Upload == "")
            //{
            //    row.Cells[3].ForeColor = Color.Maroon;
            //}
        }
    }

    protected void BunDelete_Click(object sender, EventArgs e)//EventArgs e
    {
        lblErrMsg.Visible = false;
        lblMsg.Visible = false;
        lblErrMsg.Text = "";
        lblMsg.Text = "";

        try
        {
            if (Txt_Res_Desc.Text.Trim() == "" || Txt_No_of_Res.Text.Trim() == "")
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "Kindlt Click on Edit Button In the below details";
                Txt_Res_Desc.Focus();
                return;
            }

            //System.Windows.Forms.DialogResult result = System.Windows.Forms.MessageBox.Show("Are You Want to Delete.", "EVSN Id Delete Entry", System.Windows.Forms.MessageBoxButtons.YesNo);

            string result = Request.Form["confirm_value"];



            if (result == "Yes")
            {
                string[] evsn_split;
                evsn_split = ddl_isin_det.Text.Split('-');

                camparamname = "ARG_CLIENT_CODE$ARG_COMPANY_CODE$ARG_LOT_CODE$ARG_BATCH_NO$ARG_BOOK_NO$ARG_SNO$ARG_LOCATION_CODE$ARG_DOC_TYPE$ARG_FROM_NO$ARG_TO_NO$ARG_LOT_RECEIPT_DATE$ARG_USER_CODE$ARG_FROM_YEAR$ARG_TO_YEAR$ARG_CAF_MONTH$ARG_CREATED_DATE$ARG_NAME$ARG_TO_MONTH$ARG_FLAG";
                camparameter = Session["client_code"] + "$" + string.Empty + "$" + string.Empty + "$" + evsn_split[0].ToString().Trim() + "$" + Session["Rid"].ToString().Trim() + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + evsn_split[0].ToString().Trim() + "$" + string.Empty + "$" + Session["usercode"].ToString() + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$22";
                camspcode = "CMS10";
                paramcount = 19;
                ws.Timeout = 9999999;
                ds.Clear();
                ds = ws.ExDataSetFirst(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString());
                ws.Dispose();

                if (ds.Tables[0].Rows.Count > 0)
                {
                    rta_approval();
                    Txt_Res_Desc.Text = "";
                    txt_resno.Text = "";
                    lblMsg.Visible = true;
                    if (Txt_No_of_Res.Text == GridView1.Rows.Count.ToString())
                    {
                        btnSubmit.Enabled = true;
                    }
                    else
                    {
                        if (GridView1.Rows.Count == 0)
                        {
                            txt_resno.Enabled = true;
                            Txt_No_of_Res.Enabled = true;
                            Btnadd.Enabled = true;
                        }
                        else
                        {
                            txt_resno.Enabled = true;
                            Txt_No_of_Res.Enabled = true;
                        }
                    }
                    lblMsg.Visible = true;
                    lblMsg.Text = "Deleted Successfully. EVSN ID Is : - " + evsn_split[0].ToString().Trim();
                    return;

                }
            }

            else
            {
                Txt_Res_Desc.Text = "";

                //GridView1.DataSource = null;
                //GridView1.DataBind();
                GridView1.Focus();
                return;
            }
        }
        catch (Exception EX)
        {
            lblErrMsg.Visible = true;
            lblErrMsg.Text = EX.Message.ToString();
            return;
        }
    }

    protected void btn_refresh_Click(object sender, EventArgs e)
    {
        lblErrMsg.Visible = false;
        try
        {
            Change_Captcha();
            txtCaptcha.Text = "";
            txtCaptcha.Focus();
        }
        catch (Exception ex)
        {
            lblErrMsg.Visible = true;
            lblErrMsg.Text = ex.Message.ToString();
            return;
        }
    }
    public void Change_Captcha()
    {
        try
        {
            string CapText = "";
            CapText = CaptchaCode(2) + CaptchaCode(1) + CaptchaCode(3) + CaptchaCode(4);
            CreateBitmapImage(CapText);
            Session["TxtCaptchaCode"] = CapText;
        }
        catch (Exception ex)
        {
            lblErrMsg.Visible = true;
            lblErrMsg.Text = ex.Message.ToString();
            return;
        }
    }
    public string CaptchaCode(int Number)
    {

        string Result = "";
        Random RAN = new Random();
        string[] Alp = new string[] { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" };
        if (Number == 1)
        {
            Result = RAN.Next(0, 9).ToString();
        }
        else if (Number == 2)
        {
            Result = Alp[RAN.Next(0, 25)];
        }
        else if (Number == 3)
        {
            Random RAN1 = new Random();
            Random RAN2 = new Random();
            Array.Reverse(Alp);
            Result = Alp[RAN.Next(0, 25)];
        }
        else if (Number == 4)
        {
            //int Cal = 0;
            int getN = RAN.Next(0, 9);
            getN = 9 - getN;
            Result = RAN.Next(0, getN).ToString();
        }
        return Result;
    }
    private Bitmap CreateBitmapImage(string sImageText)
    {

        Bitmap objBmpImage = new Bitmap(1, 1);

        int intWidth = 0;
        int intHeight = 0;

        // Create the Font object for the image text drawing.
        Font objFont = new Font("Arial", 20, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);

        // Create a graphics object to measure the text's width and height.
        Graphics objGraphics = Graphics.FromImage(objBmpImage);

        // This is where the bitmap size is determined.
        intWidth = (int)objGraphics.MeasureString(sImageText, objFont).Width;
        intHeight = (int)objGraphics.MeasureString(sImageText, objFont).Height;

        // Create the bmpImage again with the correct size for the text and font.
        objBmpImage = new Bitmap(objBmpImage, new Size(intWidth, intHeight));

        // Add the colors to the new bitmap.
        objGraphics = Graphics.FromImage(objBmpImage);

        // Set Background color
        objGraphics.Clear(Color.Yellow);
        objGraphics.SmoothingMode = SmoothingMode.AntiAlias;
        objGraphics.TextRenderingHint = TextRenderingHint.AntiAlias;
        objGraphics.DrawString(sImageText, objFont, new SolidBrush(Color.FromArgb(102, 102, 102)), 0, 0);
        objGraphics.Flush();

        MemoryStream stream = new MemoryStream();
        objBmpImage.Save(stream, System.Drawing.Imaging.ImageFormat.Png);
        byte[] ImgBytees = stream.ToArray();
        Image1.ImageUrl = "data:image/png;base64," + Convert.ToBase64String(ImgBytees, 0, ImgBytees.Length);
        return (objBmpImage);

    }
    protected void Txt_Vot_Start_Time_TextChanged(object sender, EventArgs e)
    {
        try
        {
            lblErrMsg.Visible = false;
            string Voting_start_date = "";
            string Voting_start_datehrs = "";
            lblErrMsg.Text = "";
            lblMsg.Text = "";

            if (Txt_Vot_Start_Time.Text.ToString() == "")
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "Kindly Enter Voting Start Date and Time";
                Txt_Vot_Start_Time.Focus();
                return;
            }

            string[] txt_vo;
            txt_vo = Txt_Vot_Start_Time.Text.ToString().Split(' ');
            Voting_start_date = Txt_Vot_Start_Time.Text.ToString().Split(' ')[0];
            Voting_start_datehrs = txt_vo[1].ToString().Substring(0, 2);
            DateTime t2 = new DateTime();
            if (!DateTime.TryParseExact(Txt_Vot_Start_Time.Text, "dd/MM/yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out t2))// hh:mm:tt
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "Invalid Voting Start Date /Time (" + Txt_Vot_Start_Time.Text + ")";
                //Txt_Vot_Start_Time.Text = "";
                Txt_Vot_Start_Time.Focus();
                return;
            }
            else
            {
                Txt_Vot_Start_Time.Text = t2.ToString("dd/MM/yyyy HH:mm");
            }

            DateTime t3 = new DateTime();
            DateTime t5 = new DateTime();
            DateTime.TryParseExact(DateTime.Now.AddHours(2).ToString("dd/MM/yyyy HH:mm"), "dd/MM/yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out t3);

            if (t2 < DateTime.Now.AddHours(2))
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "Start date (" + Txt_Vot_Start_Time.Text + " ) should be greater than minimum 2 Hrs";
                //Txt_Vot_Start_Time.Text = "";
                Txt_Vot_Start_Time.Focus();
                return;
            }


            if (txt_hold_date.Text != "")
            {
                DateTime.TryParseExact(txt_hold_date.Text, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out t5);
                if (!DateTime.TryParseExact(txt_hold_date.Text, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out t5))// hh:mm:tt
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Invalid Holding Date ( Cut Off Date )";
                    txt_hold_date.Focus();
                    return;
                }

                if (t5.Date >= t2)
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "   Holding date (" + txt_hold_date.Text + " ) shouldn't be Greater than or equal to Start Date";
                    //Txt_Vot_Start_Time.Text = "";
                    txt_hold_date.Focus();
                    return;
                }
            }

        }
        catch (Exception ex)
        {
            lblErrMsg.Visible = true;
            lblErrMsg.Text = ex.Message.ToString();
            return;
        }
    }

    protected void Txt_Vot_End_Time_TextChanged(object sender, EventArgs e)
    {
        if (Txt_Vot_End_Time.Text != "__/__/____")
        {
            timecalculation();
        }
    }

    private void timecalculation()
    {
        try
        {
            lblErrMsg.Visible = false;

            string Voting_start_date = "";
            string Voting_start_datehrs = "";
            lblErrMsg.Text = "";
            if (Txt_Vot_Start_Time.Text.ToString() == "")
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "Kindly Enter Voting Start Date and Time";
                Txt_Vot_Start_Time.Focus();
                return;
            }
            if (Txt_Vot_End_Time.Text.ToString() == "" || Txt_Vot_End_Time.Text.ToString() == "__/__/____")
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "Kindly Enter Voting End Date";
                Txt_Vot_End_Time.Focus();
                return;
            }


            string Voting_end_date = "";
            string Voting_end_datehrs = "";
            DateTime startDate = new DateTime();
            string[] txt_vo;
            string[] Vote_end_hrs;



            txt_vo = Txt_Vot_Start_Time.Text.ToString().Split(' ');

            Voting_start_date = Txt_Vot_Start_Time.Text.ToString().Split(' ')[0];
            Voting_start_datehrs = txt_vo[1].ToString().Substring(0, 2);


            Vote_end_hrs = (Txt_Vot_End_Time.Text.ToString() + " 17:00").Split(' ');
            Voting_end_date = Txt_Vot_End_Time.Text.ToString().Split(' ')[0];
            Voting_end_datehrs = Vote_end_hrs[1].ToString().Substring(0, 2);

            DateTime t2 = new DateTime();
            if (!DateTime.TryParseExact(Txt_Vot_Start_Time.Text, "dd/MM/yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out t2))// hh:mm:tt
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "Invalid Voting Start Date and Time";
                Txt_Vot_Start_Time.Focus();
                return;
            }
            else
            {
                Session["Startdate"] = t2;
                Txt_Vot_Start_Time.Text = t2.ToString("dd/MM/yyyy HH:mm");
            }

            if (t2 < DateTime.Now.AddHours(2))
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "Start date (" + (Txt_Vot_End_Time.Text.ToString() + " 17:00") + " ) should be greater than minimum 2 Hrs";
                //Txt_Vot_Start_Time.Text = "";
                Txt_Vot_Start_Time.Focus();
                return;
            }

            DateTime t1 = new DateTime();
            if (!DateTime.TryParseExact((Txt_Vot_End_Time.Text.ToString() + " 17:00"), "dd/MM/yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out t1))// hh:mm:tt
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "Invalid Voting End Date (" + Txt_Vot_End_Time.Text + " )";
                // Txt_Vot_End_Time.Text = "";
                Txt_Vot_End_Time.Focus();

                return;
            }
            else
            {
                Session["enddat"] = t1;
                Txt_Vot_End_Time.Text = t1.ToString("dd/MM/yyyy");
            }

            //if (Voting_end_date == Voting_start_date)
            //{
            //    TimeSpan ts = t1.Subtract(t2);
            //    if (Convert.ToInt32(ts.ToString().Split(':')[0]) < 2)
            //    {
            //        lblErrMsg.Visible = true;
            //        lblErrMsg.Text = "Voting End time and Start time should be between 2 Hrs ";
            //        lblErrMsg.ForeColor = System.Drawing.Color.Red;
            //        return;
            //    }
            //}
            //else
            //{
            int days = Convert.ToInt32((t1 - t2).TotalDays);
            if (days < 3)
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "Voting End date and Start date should be between 3 days ";
                lblErrMsg.ForeColor = System.Drawing.Color.Red;
                return;
            }

            //}
        }
        catch (Exception ex)
        {
            lblErrMsg.Visible = true;
            lblErrMsg.Text = ex.Message.ToString();
            return;
        }
    }
    protected void Txt_Meet_Start_Date_Time_TextChanged(object sender, EventArgs e)
    {
        try
        {
            if (Txt_Meet_Start_Date_Time.Text == "__/__/____ __:__")
            {
                return;
            }
            lblErrMsg.Visible = false;
            lblErrMsg.Text = "";
            lblMsg.Text = "";
            string Voting_start_date = "";
            string Voting_start_datehrs = "";

            string[] txt_vo;
            txt_vo = Txt_Vot_Start_Time.Text.ToString().Split(' ');
            Voting_start_date = Txt_Vot_Start_Time.Text.ToString().Split(' ')[0];
            Voting_start_datehrs = txt_vo[1].ToString().Substring(0, 2);
            DateTime t2 = new DateTime();
            if (!DateTime.TryParseExact(Txt_Meet_Start_Date_Time.Text, "dd/MM/yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out t2))// hh:mm:tt
            {
                lblErrMsg.Visible = true;
                lblErrMsg.Text = "Invalid Voting Meeting Start Date /Time (" + Txt_Meet_Start_Date_Time.Text + ")";
                //Txt_Meet_Start_Date_Time.Text = "";
                Txt_Meet_Start_Date_Time.Focus();
                return;
            }
            else
            {
                Txt_Meet_Start_Date_Time.Text = t2.ToString("dd/MM/yyyy HH:mm");
            }

            if (Session["enddat"] != null)
            {
                if (t2.Date <= ((DateTime)Session["enddat"]).Date)
                {
                    lblErrMsg.Visible = true;
                    lblErrMsg.Text = "Meeting date (" + Txt_Meet_Start_Date_Time.Text + " ) shouldn't be Less than or equal to End date";
                    //Txt_Meet_Start_Date_Time.Text = "";
                    Txt_Meet_Start_Date_Time.Focus();
                    return;
                }
            }

        }

        catch (Exception ex)
        {
            lblErrMsg.Visible = true;
            lblErrMsg.Text = ex.Message.ToString();
            return;
        }
    }
    protected void txt_isin_TextChanged(object sender, EventArgs e)
    {
        try
        {
            lblErrMsg.Visible = false;
            lblErrMsg.Text = "";
            lblMsg.Text = "";
            lblMsg.Visible = false;
            txt_isin_name.Text = "";

            camparamname = "ARG_CLIENT_CODE$ARG_COMPANY_CODE$ARG_LOT_CODE$ARG_BATCH_NO$ARG_BOOK_NO$ARG_SNO$ARG_LOCATION_CODE$ARG_DOC_TYPE$ARG_FROM_NO$ARG_TO_NO$ARG_LOT_RECEIPT_DATE$ARG_USER_CODE$ARG_FROM_YEAR$ARG_TO_YEAR$ARG_CAF_MONTH$ARG_CREATED_DATE$ARG_NAME$ARG_TO_MONTH$ARG_FLAG";
            camparameter = Session["client_code"] + "$" + string.Empty + "$" + txt_isin.Text.Trim() + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$" + string.Empty + "$51";
            camspcode = "CMS10";
            paramcount = 19;
            ws.Timeout = 9999999;
            ds.Clear();
            ds = ws.ExDataSetFirst(camspcode, camProjectName, camparamname, camparameter, paramcount, Session["client_code"].ToString());
            ws.Dispose();

            if (ds.Tables[0].Rows.Count == 1)
            {
                txt_isin_name.Text = ds.Tables[0].Rows[0][1].ToString();
                ddltype.Focus();
                return;
            }
            else
            {
                txt_isin_name.Focus();
                return;
            }

        }
        catch (Exception ex)
        {
            lblErrMsg.Visible = true;
            lblErrMsg.Text = ex.Message.ToString();
            return;
        }
    }
}
